/* tslint:disable */
/* eslint-disable */
/**
 * Customer Relationship Management API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface DocumentFileDTO
 */
export interface DocumentFileDTO {
    /**
     * 
     * @type {DocumentMetadataDTO}
     * @memberof DocumentFileDTO
     */
    'metadata': DocumentMetadataDTO;
    /**
     * 
     * @type {string}
     * @memberof DocumentFileDTO
     */
    'bytes': string;
    /**
     * 
     * @type {number}
     * @memberof DocumentFileDTO
     */
    'version': number;
    /**
     * 
     * @type {number}
     * @memberof DocumentFileDTO
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface DocumentMetadataDTO
 */
export interface DocumentMetadataDTO {
    /**
     * 
     * @type {number}
     * @memberof DocumentMetadataDTO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof DocumentMetadataDTO
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof DocumentMetadataDTO
     */
    'size': number;
    /**
     * 
     * @type {string}
     * @memberof DocumentMetadataDTO
     */
    'contentType': string;
    /**
     * 
     * @type {string}
     * @memberof DocumentMetadataDTO
     */
    'creationTimestamp': string;
}
/**
 * 
 * @export
 * @interface PageDocumentMetadataDTO
 */
export interface PageDocumentMetadataDTO {
    /**
     * 
     * @type {number}
     * @memberof PageDocumentMetadataDTO
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageDocumentMetadataDTO
     */
    'totalElements'?: number;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageDocumentMetadataDTO
     */
    'pageable'?: PageableObject;
    /**
     * 
     * @type {number}
     * @memberof PageDocumentMetadataDTO
     */
    'size'?: number;
    /**
     * 
     * @type {Array<DocumentMetadataDTO>}
     * @memberof PageDocumentMetadataDTO
     */
    'content'?: Array<DocumentMetadataDTO>;
    /**
     * 
     * @type {number}
     * @memberof PageDocumentMetadataDTO
     */
    'number'?: number;
    /**
     * 
     * @type {Array<SortObject>}
     * @memberof PageDocumentMetadataDTO
     */
    'sort'?: Array<SortObject>;
    /**
     * 
     * @type {number}
     * @memberof PageDocumentMetadataDTO
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageDocumentMetadataDTO
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageDocumentMetadataDTO
     */
    'last'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageDocumentMetadataDTO
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface Pageable
 */
export interface Pageable {
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'size'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Pageable
     */
    'sort'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PageableObject
 */
export interface PageableObject {
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    'offset'?: number;
    /**
     * 
     * @type {Array<SortObject>}
     * @memberof PageableObject
     */
    'sort'?: Array<SortObject>;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'paged'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    'unpaged'?: boolean;
}
/**
 * 
 * @export
 * @interface ProblemDetail
 */
export interface ProblemDetail {
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetail
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'instance'?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ProblemDetail
     */
    'properties'?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface SortObject
 */
export interface SortObject {
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'direction'?: string;
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'nullHandling'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'ascending'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SortObject
     */
    'property'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'ignoreCase'?: boolean;
}
/**
 * 
 * @export
 * @interface UpdateDocumentRequest
 */
export interface UpdateDocumentRequest {
    /**
     * 
     * @type {File}
     * @memberof UpdateDocumentRequest
     */
    'file': File;
    /**
     * 
     * @type {string}
     * @memberof UpdateDocumentRequest
     */
    'mailId': string;
}

/**
 * DocumentControllerApi - axios parameter creator
 * @export
 */
export const DocumentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UpdateDocumentRequest} [updateDocumentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDocument: async (updateDocumentRequest?: UpdateDocumentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/API/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDocumentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} metadataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocument: async (metadataId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metadataId' is not null or undefined
            assertParamExists('deleteDocument', 'metadataId', metadataId)
            const localVarPath = `/API/documents/{metadataId}`
                .replace(`{${"metadataId"}}`, encodeURIComponent(String(metadataId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pageNumber 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDocuments: async (pageNumber: number, limit: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageNumber' is not null or undefined
            assertParamExists('getAllDocuments', 'pageNumber', pageNumber)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('getAllDocuments', 'limit', limit)
            const localVarPath = `/API/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} metadataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocument: async (metadataId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metadataId' is not null or undefined
            assertParamExists('getDocument', 'metadataId', metadataId)
            const localVarPath = `/API/documents/{metadataId}`
                .replace(`{${"metadataId"}}`, encodeURIComponent(String(metadataId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} contactId 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentByContactId: async (contactId: number, pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('getDocumentByContactId', 'contactId', contactId)
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('getDocumentByContactId', 'pageable', pageable)
            const localVarPath = `/API/documents/contactId/{contactId}`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} metadataId 
         * @param {number} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentByIdAndVersion: async (metadataId: number, version: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metadataId' is not null or undefined
            assertParamExists('getDocumentByIdAndVersion', 'metadataId', metadataId)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getDocumentByIdAndVersion', 'version', version)
            const localVarPath = `/API/documents/{metadataId}/versions/{version}`
                .replace(`{${"metadataId"}}`, encodeURIComponent(String(metadataId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} jobOfferId 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentByJobOfferId: async (jobOfferId: number, pageable: Pageable, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobOfferId' is not null or undefined
            assertParamExists('getDocumentByJobOfferId', 'jobOfferId', jobOfferId)
            // verify required parameter 'pageable' is not null or undefined
            assertParamExists('getDocumentByJobOfferId', 'pageable', pageable)
            const localVarPath = `/API/documents/jobOfferId/{jobOfferId}`
                .replace(`{${"jobOfferId"}}`, encodeURIComponent(String(jobOfferId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageable !== undefined) {
                for (const [key, value] of Object.entries(pageable)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mailId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentByMailId: async (mailId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mailId' is not null or undefined
            assertParamExists('getDocumentByMailId', 'mailId', mailId)
            const localVarPath = `/API/documents/mailId/{mailId}`
                .replace(`{${"mailId"}}`, encodeURIComponent(String(mailId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} metadataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentBytes: async (metadataId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metadataId' is not null or undefined
            assertParamExists('getDocumentBytes', 'metadataId', metadataId)
            const localVarPath = `/API/documents/{metadataId}/data`
                .replace(`{${"metadataId"}}`, encodeURIComponent(String(metadataId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} metadataId 
         * @param {UpdateDocumentRequest} [updateDocumentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocument: async (metadataId: number, updateDocumentRequest?: UpdateDocumentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metadataId' is not null or undefined
            assertParamExists('updateDocument', 'metadataId', metadataId)
            const localVarPath = `/API/documents/{metadataId}`
                .replace(`{${"metadataId"}}`, encodeURIComponent(String(metadataId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDocumentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentControllerApi - functional programming interface
 * @export
 */
export const DocumentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UpdateDocumentRequest} [updateDocumentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDocument(updateDocumentRequest?: UpdateDocumentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentMetadataDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDocument(updateDocumentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentControllerApi.addDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} metadataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDocument(metadataId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDocument(metadataId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentControllerApi.deleteDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} pageNumber 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDocuments(pageNumber: number, limit: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageDocumentMetadataDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDocuments(pageNumber, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentControllerApi.getAllDocuments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} metadataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocument(metadataId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentMetadataDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocument(metadataId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentControllerApi.getDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} contactId 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentByContactId(contactId: number, pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageDocumentMetadataDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentByContactId(contactId, pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentControllerApi.getDocumentByContactId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} metadataId 
         * @param {number} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentByIdAndVersion(metadataId: number, version: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentFileDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentByIdAndVersion(metadataId, version, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentControllerApi.getDocumentByIdAndVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} jobOfferId 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentByJobOfferId(jobOfferId: number, pageable: Pageable, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageDocumentMetadataDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentByJobOfferId(jobOfferId, pageable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentControllerApi.getDocumentByJobOfferId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} mailId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentByMailId(mailId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocumentMetadataDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentByMailId(mailId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentControllerApi.getDocumentByMailId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} metadataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentBytes(metadataId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentFileDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentBytes(metadataId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentControllerApi.getDocumentBytes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} metadataId 
         * @param {UpdateDocumentRequest} [updateDocumentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDocument(metadataId: number, updateDocumentRequest?: UpdateDocumentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentMetadataDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDocument(metadataId, updateDocumentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentControllerApi.updateDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DocumentControllerApi - factory interface
 * @export
 */
export const DocumentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {UpdateDocumentRequest} [updateDocumentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDocument(updateDocumentRequest?: UpdateDocumentRequest, options?: any): AxiosPromise<DocumentMetadataDTO> {
            return localVarFp.addDocument(updateDocumentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} metadataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocument(metadataId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDocument(metadataId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pageNumber 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDocuments(pageNumber: number, limit: number, options?: any): AxiosPromise<PageDocumentMetadataDTO> {
            return localVarFp.getAllDocuments(pageNumber, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} metadataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocument(metadataId: number, options?: any): AxiosPromise<DocumentMetadataDTO> {
            return localVarFp.getDocument(metadataId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} contactId 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentByContactId(contactId: number, pageable: Pageable, options?: any): AxiosPromise<PageDocumentMetadataDTO> {
            return localVarFp.getDocumentByContactId(contactId, pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} metadataId 
         * @param {number} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentByIdAndVersion(metadataId: number, version: number, options?: any): AxiosPromise<DocumentFileDTO> {
            return localVarFp.getDocumentByIdAndVersion(metadataId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} jobOfferId 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentByJobOfferId(jobOfferId: number, pageable: Pageable, options?: any): AxiosPromise<PageDocumentMetadataDTO> {
            return localVarFp.getDocumentByJobOfferId(jobOfferId, pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mailId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentByMailId(mailId: string, options?: any): AxiosPromise<Array<DocumentMetadataDTO>> {
            return localVarFp.getDocumentByMailId(mailId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} metadataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentBytes(metadataId: number, options?: any): AxiosPromise<DocumentFileDTO> {
            return localVarFp.getDocumentBytes(metadataId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} metadataId 
         * @param {UpdateDocumentRequest} [updateDocumentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocument(metadataId: number, updateDocumentRequest?: UpdateDocumentRequest, options?: any): AxiosPromise<DocumentMetadataDTO> {
            return localVarFp.updateDocument(metadataId, updateDocumentRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentControllerApi - object-oriented interface
 * @export
 * @class DocumentControllerApi
 * @extends {BaseAPI}
 */
export class DocumentControllerApi extends BaseAPI {
    /**
     * 
     * @param {UpdateDocumentRequest} [updateDocumentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public addDocument(updateDocumentRequest?: UpdateDocumentRequest, options?: RawAxiosRequestConfig) {
        return DocumentControllerApiFp(this.configuration).addDocument(updateDocumentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} metadataId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public deleteDocument(metadataId: number, options?: RawAxiosRequestConfig) {
        return DocumentControllerApiFp(this.configuration).deleteDocument(metadataId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} pageNumber 
     * @param {number} limit 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public getAllDocuments(pageNumber: number, limit: number, options?: RawAxiosRequestConfig) {
        return DocumentControllerApiFp(this.configuration).getAllDocuments(pageNumber, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} metadataId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public getDocument(metadataId: number, options?: RawAxiosRequestConfig) {
        return DocumentControllerApiFp(this.configuration).getDocument(metadataId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} contactId 
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public getDocumentByContactId(contactId: number, pageable: Pageable, options?: RawAxiosRequestConfig) {
        return DocumentControllerApiFp(this.configuration).getDocumentByContactId(contactId, pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} metadataId 
     * @param {number} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public getDocumentByIdAndVersion(metadataId: number, version: number, options?: RawAxiosRequestConfig) {
        return DocumentControllerApiFp(this.configuration).getDocumentByIdAndVersion(metadataId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} jobOfferId 
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public getDocumentByJobOfferId(jobOfferId: number, pageable: Pageable, options?: RawAxiosRequestConfig) {
        return DocumentControllerApiFp(this.configuration).getDocumentByJobOfferId(jobOfferId, pageable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mailId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public getDocumentByMailId(mailId: string, options?: RawAxiosRequestConfig) {
        return DocumentControllerApiFp(this.configuration).getDocumentByMailId(mailId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} metadataId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public getDocumentBytes(metadataId: number, options?: RawAxiosRequestConfig) {
        return DocumentControllerApiFp(this.configuration).getDocumentBytes(metadataId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} metadataId 
     * @param {UpdateDocumentRequest} [updateDocumentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentControllerApi
     */
    public updateDocument(metadataId: number, updateDocumentRequest?: UpdateDocumentRequest, options?: RawAxiosRequestConfig) {
        return DocumentControllerApiFp(this.configuration).updateDocument(metadataId, updateDocumentRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



