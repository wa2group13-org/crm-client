/* tslint:disable */
/* eslint-disable */
/**
 * CRM Analytics API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GenericFilterDTO
 */
export interface GenericFilterDTO {
    /**
     * 
     * @type {string}
     * @memberof GenericFilterDTO
     */
    'op': GenericFilterDTOOpEnum;
    /**
     * 
     * @type {string}
     * @memberof GenericFilterDTO
     */
    'group': GenericFilterDTOGroupEnum;
    /**
     * 
     * @type {string}
     * @memberof GenericFilterDTO
     */
    'base': string;
}

export const GenericFilterDTOOpEnum = {
    C: 'c',
    U: 'u',
    D: 'd'
} as const;

export type GenericFilterDTOOpEnum = typeof GenericFilterDTOOpEnum[keyof typeof GenericFilterDTOOpEnum];
export const GenericFilterDTOGroupEnum = {
    Day: 'Day',
    Month: 'Month',
    Year: 'Year'
} as const;

export type GenericFilterDTOGroupEnum = typeof GenericFilterDTOGroupEnum[keyof typeof GenericFilterDTOGroupEnum];

/**
 * 
 * @export
 * @interface GenericStatDTO
 */
export interface GenericStatDTO {
    /**
     * 
     * @type {string}
     * @memberof GenericStatDTO
     */
    'dateFormat': string;
    /**
     * 
     * @type {number}
     * @memberof GenericStatDTO
     */
    'count': number;
}

/**
 * ContactControllerApi - axios parameter creator
 * @export
 */
export const ContactControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GenericFilterDTO} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByFilter4: async (filter: GenericFilterDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('getAllByFilter4', 'filter', filter)
            const localVarPath = `/API/contacts/filter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                for (const [key, value] of Object.entries(filter)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetAllByOperation4OperationEnum} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByOperation4: async (operation: GetAllByOperation4OperationEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operation' is not null or undefined
            assertParamExists('getAllByOperation4', 'operation', operation)
            const localVarPath = `/API/contacts/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operation !== undefined) {
                localVarQueryParameter['operation'] = operation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactControllerApi - functional programming interface
 * @export
 */
export const ContactControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {GenericFilterDTO} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByFilter4(filter: GenericFilterDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GenericStatDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllByFilter4(filter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactControllerApi.getAllByFilter4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetAllByOperation4OperationEnum} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByOperation4(operation: GetAllByOperation4OperationEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllByOperation4(operation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactControllerApi.getAllByOperation4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContactControllerApi - factory interface
 * @export
 */
export const ContactControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {GenericFilterDTO} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByFilter4(filter: GenericFilterDTO, options?: any): AxiosPromise<Array<GenericStatDTO>> {
            return localVarFp.getAllByFilter4(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetAllByOperation4OperationEnum} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByOperation4(operation: GetAllByOperation4OperationEnum, options?: any): AxiosPromise<number> {
            return localVarFp.getAllByOperation4(operation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContactControllerApi - object-oriented interface
 * @export
 * @class ContactControllerApi
 * @extends {BaseAPI}
 */
export class ContactControllerApi extends BaseAPI {
    /**
     * 
     * @param {GenericFilterDTO} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactControllerApi
     */
    public getAllByFilter4(filter: GenericFilterDTO, options?: RawAxiosRequestConfig) {
        return ContactControllerApiFp(this.configuration).getAllByFilter4(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetAllByOperation4OperationEnum} operation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactControllerApi
     */
    public getAllByOperation4(operation: GetAllByOperation4OperationEnum, options?: RawAxiosRequestConfig) {
        return ContactControllerApiFp(this.configuration).getAllByOperation4(operation, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetAllByOperation4OperationEnum = {
    C: 'c',
    U: 'u',
    D: 'd'
} as const;
export type GetAllByOperation4OperationEnum = typeof GetAllByOperation4OperationEnum[keyof typeof GetAllByOperation4OperationEnum];


/**
 * CustomerControllerApi - axios parameter creator
 * @export
 */
export const CustomerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GenericFilterDTO} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByFilter3: async (filter: GenericFilterDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('getAllByFilter3', 'filter', filter)
            const localVarPath = `/API/customers/filter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                for (const [key, value] of Object.entries(filter)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetAllByOperation3OperationEnum} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByOperation3: async (operation: GetAllByOperation3OperationEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operation' is not null or undefined
            assertParamExists('getAllByOperation3', 'operation', operation)
            const localVarPath = `/API/customers/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operation !== undefined) {
                localVarQueryParameter['operation'] = operation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerControllerApi - functional programming interface
 * @export
 */
export const CustomerControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {GenericFilterDTO} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByFilter3(filter: GenericFilterDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GenericStatDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllByFilter3(filter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerControllerApi.getAllByFilter3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetAllByOperation3OperationEnum} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByOperation3(operation: GetAllByOperation3OperationEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllByOperation3(operation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerControllerApi.getAllByOperation3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerControllerApi - factory interface
 * @export
 */
export const CustomerControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {GenericFilterDTO} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByFilter3(filter: GenericFilterDTO, options?: any): AxiosPromise<Array<GenericStatDTO>> {
            return localVarFp.getAllByFilter3(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetAllByOperation3OperationEnum} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByOperation3(operation: GetAllByOperation3OperationEnum, options?: any): AxiosPromise<number> {
            return localVarFp.getAllByOperation3(operation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerControllerApi - object-oriented interface
 * @export
 * @class CustomerControllerApi
 * @extends {BaseAPI}
 */
export class CustomerControllerApi extends BaseAPI {
    /**
     * 
     * @param {GenericFilterDTO} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerControllerApi
     */
    public getAllByFilter3(filter: GenericFilterDTO, options?: RawAxiosRequestConfig) {
        return CustomerControllerApiFp(this.configuration).getAllByFilter3(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetAllByOperation3OperationEnum} operation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerControllerApi
     */
    public getAllByOperation3(operation: GetAllByOperation3OperationEnum, options?: RawAxiosRequestConfig) {
        return CustomerControllerApiFp(this.configuration).getAllByOperation3(operation, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetAllByOperation3OperationEnum = {
    C: 'c',
    U: 'u',
    D: 'd'
} as const;
export type GetAllByOperation3OperationEnum = typeof GetAllByOperation3OperationEnum[keyof typeof GetAllByOperation3OperationEnum];


/**
 * JobOfferControllerApi - axios parameter creator
 * @export
 */
export const JobOfferControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GenericFilterDTO} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByFilter2: async (filter: GenericFilterDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('getAllByFilter2', 'filter', filter)
            const localVarPath = `/API/jobs/filter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                for (const [key, value] of Object.entries(filter)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetAllByOperation2OperationEnum} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByOperation2: async (operation: GetAllByOperation2OperationEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operation' is not null or undefined
            assertParamExists('getAllByOperation2', 'operation', operation)
            const localVarPath = `/API/jobs/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operation !== undefined) {
                localVarQueryParameter['operation'] = operation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobOfferControllerApi - functional programming interface
 * @export
 */
export const JobOfferControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobOfferControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {GenericFilterDTO} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByFilter2(filter: GenericFilterDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GenericStatDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllByFilter2(filter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobOfferControllerApi.getAllByFilter2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetAllByOperation2OperationEnum} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByOperation2(operation: GetAllByOperation2OperationEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllByOperation2(operation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobOfferControllerApi.getAllByOperation2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * JobOfferControllerApi - factory interface
 * @export
 */
export const JobOfferControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobOfferControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {GenericFilterDTO} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByFilter2(filter: GenericFilterDTO, options?: any): AxiosPromise<Array<GenericStatDTO>> {
            return localVarFp.getAllByFilter2(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetAllByOperation2OperationEnum} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByOperation2(operation: GetAllByOperation2OperationEnum, options?: any): AxiosPromise<number> {
            return localVarFp.getAllByOperation2(operation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobOfferControllerApi - object-oriented interface
 * @export
 * @class JobOfferControllerApi
 * @extends {BaseAPI}
 */
export class JobOfferControllerApi extends BaseAPI {
    /**
     * 
     * @param {GenericFilterDTO} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobOfferControllerApi
     */
    public getAllByFilter2(filter: GenericFilterDTO, options?: RawAxiosRequestConfig) {
        return JobOfferControllerApiFp(this.configuration).getAllByFilter2(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetAllByOperation2OperationEnum} operation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobOfferControllerApi
     */
    public getAllByOperation2(operation: GetAllByOperation2OperationEnum, options?: RawAxiosRequestConfig) {
        return JobOfferControllerApiFp(this.configuration).getAllByOperation2(operation, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetAllByOperation2OperationEnum = {
    C: 'c',
    U: 'u',
    D: 'd'
} as const;
export type GetAllByOperation2OperationEnum = typeof GetAllByOperation2OperationEnum[keyof typeof GetAllByOperation2OperationEnum];


/**
 * MessageControllerApi - axios parameter creator
 * @export
 */
export const MessageControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GenericFilterDTO} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByFilter1: async (filter: GenericFilterDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('getAllByFilter1', 'filter', filter)
            const localVarPath = `/API/message/filter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                for (const [key, value] of Object.entries(filter)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetAllByOperation1OperationEnum} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByOperation1: async (operation: GetAllByOperation1OperationEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operation' is not null or undefined
            assertParamExists('getAllByOperation1', 'operation', operation)
            const localVarPath = `/API/message/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operation !== undefined) {
                localVarQueryParameter['operation'] = operation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageControllerApi - functional programming interface
 * @export
 */
export const MessageControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {GenericFilterDTO} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByFilter1(filter: GenericFilterDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GenericStatDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllByFilter1(filter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessageControllerApi.getAllByFilter1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetAllByOperation1OperationEnum} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByOperation1(operation: GetAllByOperation1OperationEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllByOperation1(operation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessageControllerApi.getAllByOperation1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MessageControllerApi - factory interface
 * @export
 */
export const MessageControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {GenericFilterDTO} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByFilter1(filter: GenericFilterDTO, options?: any): AxiosPromise<Array<GenericStatDTO>> {
            return localVarFp.getAllByFilter1(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetAllByOperation1OperationEnum} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByOperation1(operation: GetAllByOperation1OperationEnum, options?: any): AxiosPromise<number> {
            return localVarFp.getAllByOperation1(operation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessageControllerApi - object-oriented interface
 * @export
 * @class MessageControllerApi
 * @extends {BaseAPI}
 */
export class MessageControllerApi extends BaseAPI {
    /**
     * 
     * @param {GenericFilterDTO} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public getAllByFilter1(filter: GenericFilterDTO, options?: RawAxiosRequestConfig) {
        return MessageControllerApiFp(this.configuration).getAllByFilter1(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetAllByOperation1OperationEnum} operation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public getAllByOperation1(operation: GetAllByOperation1OperationEnum, options?: RawAxiosRequestConfig) {
        return MessageControllerApiFp(this.configuration).getAllByOperation1(operation, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetAllByOperation1OperationEnum = {
    C: 'c',
    U: 'u',
    D: 'd'
} as const;
export type GetAllByOperation1OperationEnum = typeof GetAllByOperation1OperationEnum[keyof typeof GetAllByOperation1OperationEnum];


/**
 * ProfessionalControllerApi - axios parameter creator
 * @export
 */
export const ProfessionalControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GenericFilterDTO} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByFilter: async (filter: GenericFilterDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filter' is not null or undefined
            assertParamExists('getAllByFilter', 'filter', filter)
            const localVarPath = `/API/professionals/filter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                for (const [key, value] of Object.entries(filter)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetAllByOperationOperationEnum} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByOperation: async (operation: GetAllByOperationOperationEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operation' is not null or undefined
            assertParamExists('getAllByOperation', 'operation', operation)
            const localVarPath = `/API/professionals/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operation !== undefined) {
                localVarQueryParameter['operation'] = operation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfessionalControllerApi - functional programming interface
 * @export
 */
export const ProfessionalControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfessionalControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {GenericFilterDTO} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByFilter(filter: GenericFilterDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GenericStatDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllByFilter(filter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfessionalControllerApi.getAllByFilter']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetAllByOperationOperationEnum} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByOperation(operation: GetAllByOperationOperationEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllByOperation(operation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfessionalControllerApi.getAllByOperation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProfessionalControllerApi - factory interface
 * @export
 */
export const ProfessionalControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfessionalControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {GenericFilterDTO} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByFilter(filter: GenericFilterDTO, options?: any): AxiosPromise<Array<GenericStatDTO>> {
            return localVarFp.getAllByFilter(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetAllByOperationOperationEnum} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByOperation(operation: GetAllByOperationOperationEnum, options?: any): AxiosPromise<number> {
            return localVarFp.getAllByOperation(operation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfessionalControllerApi - object-oriented interface
 * @export
 * @class ProfessionalControllerApi
 * @extends {BaseAPI}
 */
export class ProfessionalControllerApi extends BaseAPI {
    /**
     * 
     * @param {GenericFilterDTO} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfessionalControllerApi
     */
    public getAllByFilter(filter: GenericFilterDTO, options?: RawAxiosRequestConfig) {
        return ProfessionalControllerApiFp(this.configuration).getAllByFilter(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetAllByOperationOperationEnum} operation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfessionalControllerApi
     */
    public getAllByOperation(operation: GetAllByOperationOperationEnum, options?: RawAxiosRequestConfig) {
        return ProfessionalControllerApiFp(this.configuration).getAllByOperation(operation, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetAllByOperationOperationEnum = {
    C: 'c',
    U: 'u',
    D: 'd'
} as const;
export type GetAllByOperationOperationEnum = typeof GetAllByOperationOperationEnum[keyof typeof GetAllByOperationOperationEnum];


