/* tslint:disable */
/* eslint-disable */
/**
 * API-Gateway API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddressStandardClaim
 */
export interface AddressStandardClaim {
    /**
     * 
     * @type {string}
     * @memberof AddressStandardClaim
     */
    'formatted'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressStandardClaim
     */
    'streetAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressStandardClaim
     */
    'postalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressStandardClaim
     */
    'locality'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressStandardClaim
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressStandardClaim
     */
    'region'?: string;
}
/**
 * 
 * @export
 * @interface GrantedAuthority
 */
export interface GrantedAuthority {
    /**
     * 
     * @type {string}
     * @memberof GrantedAuthority
     */
    'authority'?: string;
}
/**
 * 
 * @export
 * @interface OidcIdToken
 */
export interface OidcIdToken {
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'tokenValue'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'issuedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'expiresAt'?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OidcIdToken
     */
    'claims'?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'subject'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'issuer'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'authenticationContextClass'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OidcIdToken
     */
    'audience'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'authenticatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'nonce'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OidcIdToken
     */
    'authenticationMethods'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'authorizedParty'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'accessTokenHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'authorizationCodeHash'?: string;
    /**
     * 
     * @type {AddressStandardClaim}
     * @memberof OidcIdToken
     */
    'address'?: AddressStandardClaim;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'locale'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'zoneInfo'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'profile'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'preferredUsername'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'givenName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'familyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'nickName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'picture'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'website'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OidcIdToken
     */
    'emailVerified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'birthdate'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OidcIdToken
     */
    'phoneNumberVerified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OidcIdToken
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface OidcUser
 */
export interface OidcUser {
    /**
     * 
     * @type {OidcUserInfo}
     * @memberof OidcUser
     */
    'userInfo'?: OidcUserInfo;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OidcUser
     */
    'claims'?: { [key: string]: object; };
    /**
     * 
     * @type {OidcIdToken}
     * @memberof OidcUser
     */
    'idToken'?: OidcIdToken;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OidcUser
     */
    'attributes'?: { [key: string]: object; };
    /**
     * 
     * @type {Array<GrantedAuthority>}
     * @memberof OidcUser
     */
    'authorities'?: Array<GrantedAuthority>;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'subject'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'expiresAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'issuer'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'issuedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'authenticationContextClass'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OidcUser
     */
    'audience'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'authenticatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'nonce'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OidcUser
     */
    'authenticationMethods'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'authorizedParty'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'accessTokenHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'authorizationCodeHash'?: string;
    /**
     * 
     * @type {AddressStandardClaim}
     * @memberof OidcUser
     */
    'address'?: AddressStandardClaim;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'locale'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'zoneInfo'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'profile'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'preferredUsername'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'givenName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'familyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'nickName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'picture'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'website'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OidcUser
     */
    'emailVerified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'birthdate'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OidcUser
     */
    'phoneNumberVerified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OidcUser
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface OidcUserInfo
 */
export interface OidcUserInfo {
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OidcUserInfo
     */
    'claims'?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof OidcUserInfo
     */
    'subject'?: string;
    /**
     * 
     * @type {AddressStandardClaim}
     * @memberof OidcUserInfo
     */
    'address'?: AddressStandardClaim;
    /**
     * 
     * @type {string}
     * @memberof OidcUserInfo
     */
    'locale'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUserInfo
     */
    'zoneInfo'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUserInfo
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUserInfo
     */
    'profile'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUserInfo
     */
    'preferredUsername'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUserInfo
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUserInfo
     */
    'givenName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUserInfo
     */
    'familyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUserInfo
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUserInfo
     */
    'nickName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUserInfo
     */
    'picture'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUserInfo
     */
    'website'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OidcUserInfo
     */
    'emailVerified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OidcUserInfo
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUserInfo
     */
    'birthdate'?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcUserInfo
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OidcUserInfo
     */
    'phoneNumberVerified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OidcUserInfo
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'loginUrl': string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'logoutUrl': string;
    /**
     * 
     * @type {OidcUser}
     * @memberof UserDTO
     */
    'principal'?: OidcUser;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'xsrfToken': string;
}

/**
 * HomeControllerApi - axios parameter creator
 * @export
 */
export const HomeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} xSRFTOKEN 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user: async (xSRFTOKEN: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSRFTOKEN' is not null or undefined
            assertParamExists('user', 'xSRFTOKEN', xSRFTOKEN)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HomeControllerApi - functional programming interface
 * @export
 */
export const HomeControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HomeControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} xSRFTOKEN 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async user(xSRFTOKEN: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.user(xSRFTOKEN, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomeControllerApi.user']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HomeControllerApi - factory interface
 * @export
 */
export const HomeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HomeControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} xSRFTOKEN 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user(xSRFTOKEN: string, options?: any): AxiosPromise<UserDTO> {
            return localVarFp.user(xSRFTOKEN, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HomeControllerApi - object-oriented interface
 * @export
 * @class HomeControllerApi
 * @extends {BaseAPI}
 */
export class HomeControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} xSRFTOKEN 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeControllerApi
     */
    public user(xSRFTOKEN: string, options?: RawAxiosRequestConfig) {
        return HomeControllerApiFp(this.configuration).user(xSRFTOKEN, options).then((request) => request(this.axios, this.basePath));
    }
}



