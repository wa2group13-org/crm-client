/* tslint:disable */
/* eslint-disable */
/**
 * Customer Relationship Management API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface AddressDTO
 */
export interface AddressDTO {
  /**
   *
   * @type {number}
   * @memberof AddressDTO
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof AddressDTO
   */
  civic: string;
  /**
   *
   * @type {string}
   * @memberof AddressDTO
   */
  street: string;
  /**
   *
   * @type {string}
   * @memberof AddressDTO
   */
  city: string;
  /**
   *
   * @type {string}
   * @memberof AddressDTO
   */
  postalCode: string;
  /**
   *
   * @type {string}
   * @memberof AddressDTO
   */
  country: string;
}
/**
 *
 * @export
 * @interface ChangeMessagePriorityDTO
 */
export interface ChangeMessagePriorityDTO {
  /**
   *
   * @type {string}
   * @memberof ChangeMessagePriorityDTO
   */
  priority: ChangeMessagePriorityDTOPriorityEnum;
}

export const ChangeMessagePriorityDTOPriorityEnum = {
  Low: "Low",
  Medium: "Medium",
  High: "High",
} as const;

export type ChangeMessagePriorityDTOPriorityEnum =
  (typeof ChangeMessagePriorityDTOPriorityEnum)[keyof typeof ChangeMessagePriorityDTOPriorityEnum];

/**
 *
 * @export
 * @interface ChangeMessageStatusDTO
 */
export interface ChangeMessageStatusDTO {
  /**
   *
   * @type {string}
   * @memberof ChangeMessageStatusDTO
   */
  status: ChangeMessageStatusDTOStatusEnum;
  /**
   *
   * @type {string}
   * @memberof ChangeMessageStatusDTO
   */
  comment?: string;
}

export const ChangeMessageStatusDTOStatusEnum = {
  Received: "Received",
  Read: "Read",
  Discarded: "Discarded",
  Processing: "Processing",
  Done: "Done",
  Failed: "Failed",
} as const;

export type ChangeMessageStatusDTOStatusEnum =
  (typeof ChangeMessageStatusDTOStatusEnum)[keyof typeof ChangeMessageStatusDTOStatusEnum];

/**
 *
 * @export
 * @interface ContactDTO
 */
export interface ContactDTO {
  /**
   *
   * @type {number}
   * @memberof ContactDTO
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof ContactDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ContactDTO
   */
  surname: string;
  /**
   *
   * @type {string}
   * @memberof ContactDTO
   */
  category: ContactDTOCategoryEnum;
  /**
   *
   * @type {string}
   * @memberof ContactDTO
   */
  ssn?: string;
  /**
   *
   * @type {Array<TelephoneDTO>}
   * @memberof ContactDTO
   */
  telephones: Array<TelephoneDTO>;
  /**
   *
   * @type {Array<EmailDTO>}
   * @memberof ContactDTO
   */
  emails: Array<EmailDTO>;
  /**
   *
   * @type {Array<AddressDTO>}
   * @memberof ContactDTO
   */
  addresses: Array<AddressDTO>;
}

export const ContactDTOCategoryEnum = {
  Customer: "Customer",
  Professional: "Professional",
  Unknown: "Unknown",
} as const;

export type ContactDTOCategoryEnum =
  (typeof ContactDTOCategoryEnum)[keyof typeof ContactDTOCategoryEnum];

/**
 *
 * @export
 * @interface ContactIdDTO
 */
export interface ContactIdDTO {
  /**
   *
   * @type {number}
   * @memberof ContactIdDTO
   */
  contactId: number;
  /**
   *
   * @type {number}
   * @memberof ContactIdDTO
   */
  b: number;
}
/**
 *
 * @export
 * @interface CreateAddressDTO
 */
export interface CreateAddressDTO {
  /**
   *
   * @type {string}
   * @memberof CreateAddressDTO
   */
  civic: string;
  /**
   *
   * @type {string}
   * @memberof CreateAddressDTO
   */
  street: string;
  /**
   *
   * @type {string}
   * @memberof CreateAddressDTO
   */
  city: string;
  /**
   *
   * @type {string}
   * @memberof CreateAddressDTO
   */
  postalCode: string;
  /**
   *
   * @type {string}
   * @memberof CreateAddressDTO
   */
  country: string;
}
/**
 *
 * @export
 * @interface CreateContactDTO
 */
export interface CreateContactDTO {
  /**
   *
   * @type {string}
   * @memberof CreateContactDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateContactDTO
   */
  surname: string;
  /**
   *
   * @type {string}
   * @memberof CreateContactDTO
   */
  category: CreateContactDTOCategoryEnum;
  /**
   *
   * @type {string}
   * @memberof CreateContactDTO
   */
  ssn?: string;
  /**
   *
   * @type {Array<CreateTelephoneDTO>}
   * @memberof CreateContactDTO
   */
  telephones: Array<CreateTelephoneDTO>;
  /**
   *
   * @type {Array<CreateEmailDTO>}
   * @memberof CreateContactDTO
   */
  emails: Array<CreateEmailDTO>;
  /**
   *
   * @type {Array<CreateAddressDTO>}
   * @memberof CreateContactDTO
   */
  addresses: Array<CreateAddressDTO>;
}

export const CreateContactDTOCategoryEnum = {
  Customer: "Customer",
  Professional: "Professional",
  Unknown: "Unknown",
} as const;

export type CreateContactDTOCategoryEnum =
  (typeof CreateContactDTOCategoryEnum)[keyof typeof CreateContactDTOCategoryEnum];

/**
 *
 * @export
 * @interface CreateCustomerDTO
 */
export interface CreateCustomerDTO {
  /**
   *
   * @type {string}
   * @memberof CreateCustomerDTO
   */
  note: string;
  /**
   *
   * @type {number}
   * @memberof CreateCustomerDTO
   */
  contactId: number;
  /**
   *
   * @type {CreateContactDTO}
   * @memberof CreateCustomerDTO
   */
  contactInfo?: CreateContactDTO;
}
/**
 *
 * @export
 * @interface CreateEmailDTO
 */
export interface CreateEmailDTO {
  /**
   *
   * @type {string}
   * @memberof CreateEmailDTO
   */
  email: string;
}
/**
 *
 * @export
 * @interface CreateJobOfferDTO
 */
export interface CreateJobOfferDTO {
  /**
   *
   * @type {number}
   * @memberof CreateJobOfferDTO
   */
  customerId: number;
  /**
   *
   * @type {string}
   * @memberof CreateJobOfferDTO
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof CreateJobOfferDTO
   */
  status: CreateJobOfferDTOStatusEnum;
  /**
   *
   * @type {Set<string>}
   * @memberof CreateJobOfferDTO
   */
  skills: Set<string>;
  /**
   *
   * @type {number}
   * @memberof CreateJobOfferDTO
   */
  duration: number;
}

export const CreateJobOfferDTOStatusEnum = {
  Created: "Created",
  SelectionPhase: "SelectionPhase",
  CandidateProposal: "CandidateProposal",
  Consolidated: "Consolidated",
  Done: "Done",
  Aborted: "Aborted",
} as const;

export type CreateJobOfferDTOStatusEnum =
  (typeof CreateJobOfferDTOStatusEnum)[keyof typeof CreateJobOfferDTOStatusEnum];

/**
 *
 * @export
 * @interface CreateJobOfferHistoryNoteDTO
 */
export interface CreateJobOfferHistoryNoteDTO {
  /**
   *
   * @type {string}
   * @memberof CreateJobOfferHistoryNoteDTO
   */
  note: string;
}
/**
 *
 * @export
 * @interface CreateMessageDTO
 */
export interface CreateMessageDTO {
  /**
   *
   * @type {string}
   * @memberof CreateMessageDTO
   */
  sender: string;
  /**
   *
   * @type {string}
   * @memberof CreateMessageDTO
   */
  channel: string;
  /**
   *
   * @type {string}
   * @memberof CreateMessageDTO
   */
  priority: CreateMessageDTOPriorityEnum;
  /**
   *
   * @type {string}
   * @memberof CreateMessageDTO
   */
  subject?: string;
  /**
   *
   * @type {string}
   * @memberof CreateMessageDTO
   */
  body?: string;
  /**
   *
   * @type {string}
   * @memberof CreateMessageDTO
   */
  mailId: string;
}

export const CreateMessageDTOPriorityEnum = {
  Low: "Low",
  Medium: "Medium",
  High: "High",
} as const;

export type CreateMessageDTOPriorityEnum =
  (typeof CreateMessageDTOPriorityEnum)[keyof typeof CreateMessageDTOPriorityEnum];

/**
 *
 * @export
 * @interface CreateProfessionalDTO
 */
export interface CreateProfessionalDTO {
  /**
   *
   * @type {number}
   * @memberof CreateProfessionalDTO
   */
  dailyRate: number;
  /**
   *
   * @type {string}
   * @memberof CreateProfessionalDTO
   */
  employmentState: CreateProfessionalDTOEmploymentStateEnum;
  /**
   *
   * @type {Set<string>}
   * @memberof CreateProfessionalDTO
   */
  skills: Set<string>;
  /**
   *
   * @type {string}
   * @memberof CreateProfessionalDTO
   */
  notes: string;
  /**
   *
   * @type {number}
   * @memberof CreateProfessionalDTO
   */
  contactId: number;
  /**
   *
   * @type {CreateContactDTO}
   * @memberof CreateProfessionalDTO
   */
  contactInfo?: CreateContactDTO;
}

export const CreateProfessionalDTOEmploymentStateEnum = {
  Employed: "Employed",
  Available: "Available",
  NotAvailable: "NotAvailable",
} as const;

export type CreateProfessionalDTOEmploymentStateEnum =
  (typeof CreateProfessionalDTOEmploymentStateEnum)[keyof typeof CreateProfessionalDTOEmploymentStateEnum];

/**
 *
 * @export
 * @interface CreateTelephoneDTO
 */
export interface CreateTelephoneDTO {
  /**
   *
   * @type {string}
   * @memberof CreateTelephoneDTO
   */
  number: string;
}
/**
 *
 * @export
 * @interface CustomerDTO
 */
export interface CustomerDTO {
  /**
   *
   * @type {number}
   * @memberof CustomerDTO
   */
  id: number;
  /**
   *
   * @type {Array<JobOfferDTO>}
   * @memberof CustomerDTO
   */
  jobOffers: Array<JobOfferDTO>;
  /**
   *
   * @type {string}
   * @memberof CustomerDTO
   */
  note?: string;
  /**
   *
   * @type {ContactDTO}
   * @memberof CustomerDTO
   */
  contact: ContactDTO;
}
/**
 *
 * @export
 * @interface CustomerFilters
 */
export interface CustomerFilters {
  /**
   *
   * @type {LocationFilter}
   * @memberof CustomerFilters
   */
  byLocation?: LocationFilter;
  /**
   *
   * @type {string}
   * @memberof CustomerFilters
   */
  byFullName?: string;
}
/**
 *
 * @export
 * @interface CustomerNoteDTO
 */
export interface CustomerNoteDTO {
  /**
   *
   * @type {string}
   * @memberof CustomerNoteDTO
   */
  note: string;
}
/**
 *
 * @export
 * @interface EmailDTO
 */
export interface EmailDTO {
  /**
   *
   * @type {number}
   * @memberof EmailDTO
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof EmailDTO
   */
  email: string;
}
/**
 *
 * @export
 * @interface GetJobOffers
 */
export interface GetJobOffers {
  /**
   *
   * @type {JobOfferFilters}
   * @memberof GetJobOffers
   */
  filters?: JobOfferFilters;
  /**
   *
   * @type {number}
   * @memberof GetJobOffers
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof GetJobOffers
   */
  limit: number;
}
/**
 *
 * @export
 * @interface JobOfferDTO
 */
export interface JobOfferDTO {
  /**
   *
   * @type {number}
   * @memberof JobOfferDTO
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof JobOfferDTO
   */
  customerId: number;
  /**
   *
   * @type {number}
   * @memberof JobOfferDTO
   */
  professionalId?: number;
  /**
   *
   * @type {string}
   * @memberof JobOfferDTO
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof JobOfferDTO
   */
  status: JobOfferDTOStatusEnum;
  /**
   *
   * @type {Set<string>}
   * @memberof JobOfferDTO
   */
  skills: Set<string>;
  /**
   *
   * @type {number}
   * @memberof JobOfferDTO
   */
  duration: number;
  /**
   *
   * @type {Array<JobOfferHistoryDTO>}
   * @memberof JobOfferDTO
   */
  notes: Array<JobOfferHistoryDTO>;
  /**
   *
   * @type {number}
   * @memberof JobOfferDTO
   */
  value?: number;
}

export const JobOfferDTOStatusEnum = {
  Created: "Created",
  SelectionPhase: "SelectionPhase",
  CandidateProposal: "CandidateProposal",
  Consolidated: "Consolidated",
  Done: "Done",
  Aborted: "Aborted",
} as const;

export type JobOfferDTOStatusEnum =
  (typeof JobOfferDTOStatusEnum)[keyof typeof JobOfferDTOStatusEnum];

/**
 *
 * @export
 * @interface JobOfferFilters
 */
export interface JobOfferFilters {
  /**
   *
   * @type {number}
   * @memberof JobOfferFilters
   */
  byCustomerId?: number;
  /**
   *
   * @type {number}
   * @memberof JobOfferFilters
   */
  byProfessionalId?: number;
  /**
   *
   * @type {Set<string>}
   * @memberof JobOfferFilters
   */
  byStatus?: Set<JobOfferFiltersByStatusEnum>;
}

export const JobOfferFiltersByStatusEnum = {
  Created: "Created",
  SelectionPhase: "SelectionPhase",
  CandidateProposal: "CandidateProposal",
  Consolidated: "Consolidated",
  Done: "Done",
  Aborted: "Aborted",
} as const;

export type JobOfferFiltersByStatusEnum =
  (typeof JobOfferFiltersByStatusEnum)[keyof typeof JobOfferFiltersByStatusEnum];

/**
 *
 * @export
 * @interface JobOfferHistoryDTO
 */
export interface JobOfferHistoryDTO {
  /**
   *
   * @type {number}
   * @memberof JobOfferHistoryDTO
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof JobOfferHistoryDTO
   */
  assignedProfessional?: number;
  /**
   *
   * @type {string}
   * @memberof JobOfferHistoryDTO
   */
  logTime: string;
  /**
   *
   * @type {string}
   * @memberof JobOfferHistoryDTO
   */
  currentStatus: JobOfferHistoryDTOCurrentStatusEnum;
  /**
   *
   * @type {string}
   * @memberof JobOfferHistoryDTO
   */
  note?: string;
}

export const JobOfferHistoryDTOCurrentStatusEnum = {
  Created: "Created",
  SelectionPhase: "SelectionPhase",
  CandidateProposal: "CandidateProposal",
  Consolidated: "Consolidated",
  Done: "Done",
  Aborted: "Aborted",
} as const;

export type JobOfferHistoryDTOCurrentStatusEnum =
  (typeof JobOfferHistoryDTOCurrentStatusEnum)[keyof typeof JobOfferHistoryDTOCurrentStatusEnum];

/**
 *
 * @export
 * @interface LocationFilter
 */
export interface LocationFilter {
  /**
   *
   * @type {string}
   * @memberof LocationFilter
   */
  byCity?: string;
  /**
   *
   * @type {string}
   * @memberof LocationFilter
   */
  byPostalCode?: string;
  /**
   *
   * @type {string}
   * @memberof LocationFilter
   */
  byStreet?: string;
  /**
   *
   * @type {string}
   * @memberof LocationFilter
   */
  byCivic?: string;
  /**
   *
   * @type {string}
   * @memberof LocationFilter
   */
  byCountry?: string;
}
/**
 *
 * @export
 * @interface MessageActionsHistoryDTO
 */
export interface MessageActionsHistoryDTO {
  /**
   *
   * @type {number}
   * @memberof MessageActionsHistoryDTO
   */
  messageId: number;
  /**
   *
   * @type {string}
   * @memberof MessageActionsHistoryDTO
   */
  status: MessageActionsHistoryDTOStatusEnum;
  /**
   *
   * @type {string}
   * @memberof MessageActionsHistoryDTO
   */
  timestamp: string;
  /**
   *
   * @type {string}
   * @memberof MessageActionsHistoryDTO
   */
  comment?: string;
}

export const MessageActionsHistoryDTOStatusEnum = {
  Received: "Received",
  Read: "Read",
  Discarded: "Discarded",
  Processing: "Processing",
  Done: "Done",
  Failed: "Failed",
} as const;

export type MessageActionsHistoryDTOStatusEnum =
  (typeof MessageActionsHistoryDTOStatusEnum)[keyof typeof MessageActionsHistoryDTOStatusEnum];

/**
 *
 * @export
 * @interface MessageDTO
 */
export interface MessageDTO {
  /**
   *
   * @type {number}
   * @memberof MessageDTO
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof MessageDTO
   */
  body?: string;
  /**
   *
   * @type {string}
   * @memberof MessageDTO
   */
  sender: string;
  /**
   *
   * @type {string}
   * @memberof MessageDTO
   */
  date: string;
  /**
   *
   * @type {string}
   * @memberof MessageDTO
   */
  subject?: string;
  /**
   *
   * @type {string}
   * @memberof MessageDTO
   */
  channel: string;
  /**
   *
   * @type {string}
   * @memberof MessageDTO
   */
  priority: MessageDTOPriorityEnum;
  /**
   *
   * @type {string}
   * @memberof MessageDTO
   */
  status: MessageDTOStatusEnum;
  /**
   *
   * @type {string}
   * @memberof MessageDTO
   */
  mailId?: string;
}

export const MessageDTOPriorityEnum = {
  Low: "Low",
  Medium: "Medium",
  High: "High",
} as const;

export type MessageDTOPriorityEnum =
  (typeof MessageDTOPriorityEnum)[keyof typeof MessageDTOPriorityEnum];
export const MessageDTOStatusEnum = {
  Received: "Received",
  Read: "Read",
  Discarded: "Discarded",
  Processing: "Processing",
  Done: "Done",
  Failed: "Failed",
} as const;

export type MessageDTOStatusEnum =
  (typeof MessageDTOStatusEnum)[keyof typeof MessageDTOStatusEnum];

/**
 *
 * @export
 * @interface PageContactDTO
 */
export interface PageContactDTO {
  /**
   *
   * @type {number}
   * @memberof PageContactDTO
   */
  totalPages?: number;
  /**
   *
   * @type {number}
   * @memberof PageContactDTO
   */
  totalElements?: number;
  /**
   *
   * @type {PageableObject}
   * @memberof PageContactDTO
   */
  pageable?: PageableObject;
  /**
   *
   * @type {number}
   * @memberof PageContactDTO
   */
  size?: number;
  /**
   *
   * @type {Array<ContactDTO>}
   * @memberof PageContactDTO
   */
  content?: Array<ContactDTO>;
  /**
   *
   * @type {number}
   * @memberof PageContactDTO
   */
  number?: number;
  /**
   *
   * @type {Array<SortObject>}
   * @memberof PageContactDTO
   */
  sort?: Array<SortObject>;
  /**
   *
   * @type {number}
   * @memberof PageContactDTO
   */
  numberOfElements?: number;
  /**
   *
   * @type {boolean}
   * @memberof PageContactDTO
   */
  first?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageContactDTO
   */
  last?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageContactDTO
   */
  empty?: boolean;
}
/**
 *
 * @export
 * @interface PageCustomerDTO
 */
export interface PageCustomerDTO {
  /**
   *
   * @type {number}
   * @memberof PageCustomerDTO
   */
  totalPages?: number;
  /**
   *
   * @type {number}
   * @memberof PageCustomerDTO
   */
  totalElements?: number;
  /**
   *
   * @type {PageableObject}
   * @memberof PageCustomerDTO
   */
  pageable?: PageableObject;
  /**
   *
   * @type {number}
   * @memberof PageCustomerDTO
   */
  size?: number;
  /**
   *
   * @type {Array<CustomerDTO>}
   * @memberof PageCustomerDTO
   */
  content?: Array<CustomerDTO>;
  /**
   *
   * @type {number}
   * @memberof PageCustomerDTO
   */
  number?: number;
  /**
   *
   * @type {Array<SortObject>}
   * @memberof PageCustomerDTO
   */
  sort?: Array<SortObject>;
  /**
   *
   * @type {number}
   * @memberof PageCustomerDTO
   */
  numberOfElements?: number;
  /**
   *
   * @type {boolean}
   * @memberof PageCustomerDTO
   */
  first?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageCustomerDTO
   */
  last?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageCustomerDTO
   */
  empty?: boolean;
}
/**
 *
 * @export
 * @interface PageJobOfferDTO
 */
export interface PageJobOfferDTO {
  /**
   *
   * @type {number}
   * @memberof PageJobOfferDTO
   */
  totalPages?: number;
  /**
   *
   * @type {number}
   * @memberof PageJobOfferDTO
   */
  totalElements?: number;
  /**
   *
   * @type {PageableObject}
   * @memberof PageJobOfferDTO
   */
  pageable?: PageableObject;
  /**
   *
   * @type {number}
   * @memberof PageJobOfferDTO
   */
  size?: number;
  /**
   *
   * @type {Array<JobOfferDTO>}
   * @memberof PageJobOfferDTO
   */
  content?: Array<JobOfferDTO>;
  /**
   *
   * @type {number}
   * @memberof PageJobOfferDTO
   */
  number?: number;
  /**
   *
   * @type {Array<SortObject>}
   * @memberof PageJobOfferDTO
   */
  sort?: Array<SortObject>;
  /**
   *
   * @type {number}
   * @memberof PageJobOfferDTO
   */
  numberOfElements?: number;
  /**
   *
   * @type {boolean}
   * @memberof PageJobOfferDTO
   */
  first?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageJobOfferDTO
   */
  last?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageJobOfferDTO
   */
  empty?: boolean;
}
/**
 *
 * @export
 * @interface PageMessageDTO
 */
export interface PageMessageDTO {
  /**
   *
   * @type {number}
   * @memberof PageMessageDTO
   */
  totalPages?: number;
  /**
   *
   * @type {number}
   * @memberof PageMessageDTO
   */
  totalElements?: number;
  /**
   *
   * @type {PageableObject}
   * @memberof PageMessageDTO
   */
  pageable?: PageableObject;
  /**
   *
   * @type {number}
   * @memberof PageMessageDTO
   */
  size?: number;
  /**
   *
   * @type {Array<MessageDTO>}
   * @memberof PageMessageDTO
   */
  content?: Array<MessageDTO>;
  /**
   *
   * @type {number}
   * @memberof PageMessageDTO
   */
  number?: number;
  /**
   *
   * @type {Array<SortObject>}
   * @memberof PageMessageDTO
   */
  sort?: Array<SortObject>;
  /**
   *
   * @type {number}
   * @memberof PageMessageDTO
   */
  numberOfElements?: number;
  /**
   *
   * @type {boolean}
   * @memberof PageMessageDTO
   */
  first?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageMessageDTO
   */
  last?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageMessageDTO
   */
  empty?: boolean;
}
/**
 *
 * @export
 * @interface PageProfessionalDTO
 */
export interface PageProfessionalDTO {
  /**
   *
   * @type {number}
   * @memberof PageProfessionalDTO
   */
  totalPages?: number;
  /**
   *
   * @type {number}
   * @memberof PageProfessionalDTO
   */
  totalElements?: number;
  /**
   *
   * @type {PageableObject}
   * @memberof PageProfessionalDTO
   */
  pageable?: PageableObject;
  /**
   *
   * @type {number}
   * @memberof PageProfessionalDTO
   */
  size?: number;
  /**
   *
   * @type {Array<ProfessionalDTO>}
   * @memberof PageProfessionalDTO
   */
  content?: Array<ProfessionalDTO>;
  /**
   *
   * @type {number}
   * @memberof PageProfessionalDTO
   */
  number?: number;
  /**
   *
   * @type {Array<SortObject>}
   * @memberof PageProfessionalDTO
   */
  sort?: Array<SortObject>;
  /**
   *
   * @type {number}
   * @memberof PageProfessionalDTO
   */
  numberOfElements?: number;
  /**
   *
   * @type {boolean}
   * @memberof PageProfessionalDTO
   */
  first?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageProfessionalDTO
   */
  last?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageProfessionalDTO
   */
  empty?: boolean;
}
/**
 *
 * @export
 * @interface PageableObject
 */
export interface PageableObject {
  /**
   *
   * @type {number}
   * @memberof PageableObject
   */
  pageNumber?: number;
  /**
   *
   * @type {number}
   * @memberof PageableObject
   */
  pageSize?: number;
  /**
   *
   * @type {number}
   * @memberof PageableObject
   */
  offset?: number;
  /**
   *
   * @type {Array<SortObject>}
   * @memberof PageableObject
   */
  sort?: Array<SortObject>;
  /**
   *
   * @type {boolean}
   * @memberof PageableObject
   */
  paged?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageableObject
   */
  unpaged?: boolean;
}
/**
 *
 * @export
 * @interface ProblemDetail
 */
export interface ProblemDetail {
  /**
   *
   * @type {string}
   * @memberof ProblemDetail
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof ProblemDetail
   */
  title?: string;
  /**
   *
   * @type {number}
   * @memberof ProblemDetail
   */
  status?: number;
  /**
   *
   * @type {string}
   * @memberof ProblemDetail
   */
  detail?: string;
  /**
   *
   * @type {string}
   * @memberof ProblemDetail
   */
  instance?: string;
  /**
   *
   * @type {{ [key: string]: object; }}
   * @memberof ProblemDetail
   */
  properties?: { [key: string]: object };
}
/**
 *
 * @export
 * @interface ProfessionalDTO
 */
export interface ProfessionalDTO {
  /**
   *
   * @type {number}
   * @memberof ProfessionalDTO
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof ProfessionalDTO
   */
  dailyRate: number;
  /**
   *
   * @type {string}
   * @memberof ProfessionalDTO
   */
  employmentState: ProfessionalDTOEmploymentStateEnum;
  /**
   *
   * @type {Set<string>}
   * @memberof ProfessionalDTO
   */
  skills: Set<string>;
  /**
   *
   * @type {string}
   * @memberof ProfessionalDTO
   */
  notes?: string;
  /**
   *
   * @type {ContactDTO}
   * @memberof ProfessionalDTO
   */
  contact: ContactDTO;
}

export const ProfessionalDTOEmploymentStateEnum = {
  Employed: "Employed",
  Available: "Available",
  NotAvailable: "NotAvailable",
} as const;

export type ProfessionalDTOEmploymentStateEnum =
  (typeof ProfessionalDTOEmploymentStateEnum)[keyof typeof ProfessionalDTOEmploymentStateEnum];

/**
 *
 * @export
 * @interface ProfessionalFilters
 */
export interface ProfessionalFilters {
  /**
   *
   * @type {Set<string>}
   * @memberof ProfessionalFilters
   */
  bySkills?: string[];
  /**
   *
   * @type {string}
   * @memberof ProfessionalFilters
   */
  byEmploymentState?: ProfessionalFiltersByEmploymentStateEnum;
  /**
   *
   * @type {LocationFilter}
   * @memberof ProfessionalFilters
   */
  byLocation?: LocationFilter;
  /**
   *
   * @type {string}
   * @memberof ProfessionalFilters
   */
  byFullName?: string;
}

export const ProfessionalFiltersByEmploymentStateEnum = {
  Employed: "Employed",
  Available: "Available",
  NotAvailable: "NotAvailable",
} as const;

export type ProfessionalFiltersByEmploymentStateEnum =
  (typeof ProfessionalFiltersByEmploymentStateEnum)[keyof typeof ProfessionalFiltersByEmploymentStateEnum];

/**
 *
 * @export
 * @interface SortObject
 */
export interface SortObject {
  /**
   *
   * @type {string}
   * @memberof SortObject
   */
  direction?: string;
  /**
   *
   * @type {string}
   * @memberof SortObject
   */
  nullHandling?: string;
  /**
   *
   * @type {boolean}
   * @memberof SortObject
   */
  ascending?: boolean;
  /**
   *
   * @type {string}
   * @memberof SortObject
   */
  property?: string;
  /**
   *
   * @type {boolean}
   * @memberof SortObject
   */
  ignoreCase?: boolean;
}
/**
 *
 * @export
 * @interface TelephoneDTO
 */
export interface TelephoneDTO {
  /**
   *
   * @type {number}
   * @memberof TelephoneDTO
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof TelephoneDTO
   */
  number: string;
}
/**
 *
 * @export
 * @interface UpdateJobOfferDetailsDTO
 */
export interface UpdateJobOfferDetailsDTO {
  /**
   *
   * @type {string}
   * @memberof UpdateJobOfferDetailsDTO
   */
  description: string;
  /**
   *
   * @type {Set<string>}
   * @memberof UpdateJobOfferDetailsDTO
   */
  skills: Set<string>;
  /**
   *
   * @type {number}
   * @memberof UpdateJobOfferDetailsDTO
   */
  duration: number;
}
/**
 *
 * @export
 * @interface UpdateJobOfferStatusDTO
 */
export interface UpdateJobOfferStatusDTO {
  /**
   *
   * @type {string}
   * @memberof UpdateJobOfferStatusDTO
   */
  status: UpdateJobOfferStatusDTOStatusEnum;
  /**
   *
   * @type {number}
   * @memberof UpdateJobOfferStatusDTO
   */
  professionalId?: number;
  /**
   *
   * @type {string}
   * @memberof UpdateJobOfferStatusDTO
   */
  note: string;
}

export const UpdateJobOfferStatusDTOStatusEnum = {
  Created: "Created",
  SelectionPhase: "SelectionPhase",
  CandidateProposal: "CandidateProposal",
  Consolidated: "Consolidated",
  Done: "Done",
  Aborted: "Aborted",
} as const;

export type UpdateJobOfferStatusDTOStatusEnum =
  (typeof UpdateJobOfferStatusDTOStatusEnum)[keyof typeof UpdateJobOfferStatusDTOStatusEnum];

/**
 * ContactControllerApi - axios parameter creator
 * @export
 */
export const ContactControllerApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {CreateContactDTO} createContactDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContact: async (
      createContactDTO: CreateContactDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createContactDTO' is not null or undefined
      assertParamExists("createContact", "createContactDTO", createContactDTO);
      const localVarPath = `/API/contacts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createContactDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateContactDTO} createContactDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContact1: async (
      createContactDTO: CreateContactDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createContactDTO' is not null or undefined
      assertParamExists("createContact1", "createContactDTO", createContactDTO);
      const localVarPath = `/API/contacts/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createContactDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} contactId
     * @param {CreateAddressDTO} createAddressDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContactAddress: async (
      contactId: number,
      createAddressDTO: CreateAddressDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("createContactAddress", "contactId", contactId);
      // verify required parameter 'createAddressDTO' is not null or undefined
      assertParamExists(
        "createContactAddress",
        "createAddressDTO",
        createAddressDTO,
      );
      const localVarPath = `/API/contacts/{contactId}/addresses`.replace(
        `{${"contactId"}}`,
        encodeURIComponent(String(contactId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createAddressDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} contactId
     * @param {CreateEmailDTO} createEmailDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContactEmail: async (
      contactId: number,
      createEmailDTO: CreateEmailDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("createContactEmail", "contactId", contactId);
      // verify required parameter 'createEmailDTO' is not null or undefined
      assertParamExists("createContactEmail", "createEmailDTO", createEmailDTO);
      const localVarPath = `/API/contacts/{contactId}/emails`.replace(
        `{${"contactId"}}`,
        encodeURIComponent(String(contactId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createEmailDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} contactId
     * @param {CreateTelephoneDTO} createTelephoneDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContactTelephone: async (
      contactId: number,
      createTelephoneDTO: CreateTelephoneDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("createContactTelephone", "contactId", contactId);
      // verify required parameter 'createTelephoneDTO' is not null or undefined
      assertParamExists(
        "createContactTelephone",
        "createTelephoneDTO",
        createTelephoneDTO,
      );
      const localVarPath = `/API/contacts/{contactId}/telephones`.replace(
        `{${"contactId"}}`,
        encodeURIComponent(String(contactId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createTelephoneDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} contactId
     * @param {number} addressId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContactAddress: async (
      contactId: number,
      addressId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("deleteContactAddress", "contactId", contactId);
      // verify required parameter 'addressId' is not null or undefined
      assertParamExists("deleteContactAddress", "addressId", addressId);
      const localVarPath = `/API/contacts/{contactId}/addresses/{addressId}`
        .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)))
        .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContactById: async (
      contactId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("deleteContactById", "contactId", contactId);
      const localVarPath = `/API/contacts/{contactId}`.replace(
        `{${"contactId"}}`,
        encodeURIComponent(String(contactId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} contactId
     * @param {number} emailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContactEmailById: async (
      contactId: number,
      emailId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("deleteContactEmailById", "contactId", contactId);
      // verify required parameter 'emailId' is not null or undefined
      assertParamExists("deleteContactEmailById", "emailId", emailId);
      const localVarPath = `/API/contacts/{contactId}/emails/{emailId}`
        .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)))
        .replace(`{${"emailId"}}`, encodeURIComponent(String(emailId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} contactId
     * @param {number} telephoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContactTelephoneById: async (
      contactId: number,
      telephoneId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("deleteContactTelephoneById", "contactId", contactId);
      // verify required parameter 'telephoneId' is not null or undefined
      assertParamExists(
        "deleteContactTelephoneById",
        "telephoneId",
        telephoneId,
      );
      const localVarPath = `/API/contacts/{contactId}/telephones/{telephoneId}`
        .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)))
        .replace(`{${"telephoneId"}}`, encodeURIComponent(String(telephoneId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} contactId
     * @param {number} addressId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactAddressById: async (
      contactId: number,
      addressId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("getContactAddressById", "contactId", contactId);
      // verify required parameter 'addressId' is not null or undefined
      assertParamExists("getContactAddressById", "addressId", addressId);
      const localVarPath = `/API/contacts/{contactId}/addresses/{addressId}`
        .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)))
        .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactAddresses: async (
      contactId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("getContactAddresses", "contactId", contactId);
      const localVarPath = `/API/contacts/{contactId}/addresses`.replace(
        `{${"contactId"}}`,
        encodeURIComponent(String(contactId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactById: async (
      contactId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("getContactById", "contactId", contactId);
      const localVarPath = `/API/contacts/{contactId}`.replace(
        `{${"contactId"}}`,
        encodeURIComponent(String(contactId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} contactId
     * @param {number} emailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactEmailById: async (
      contactId: number,
      emailId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("getContactEmailById", "contactId", contactId);
      // verify required parameter 'emailId' is not null or undefined
      assertParamExists("getContactEmailById", "emailId", emailId);
      const localVarPath = `/API/contacts/{contactId}/emails/{emailId}`
        .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)))
        .replace(`{${"emailId"}}`, encodeURIComponent(String(emailId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactEmails: async (
      contactId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("getContactEmails", "contactId", contactId);
      const localVarPath = `/API/contacts/{contactId}/emails`.replace(
        `{${"contactId"}}`,
        encodeURIComponent(String(contactId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} contactId
     * @param {number} telephoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactTelephoneById: async (
      contactId: number,
      telephoneId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("getContactTelephoneById", "contactId", contactId);
      // verify required parameter 'telephoneId' is not null or undefined
      assertParamExists("getContactTelephoneById", "telephoneId", telephoneId);
      const localVarPath = `/API/contacts/{contactId}/telephones/{telephoneId}`
        .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)))
        .replace(`{${"telephoneId"}}`, encodeURIComponent(String(telephoneId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactTelephones: async (
      contactId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("getContactTelephones", "contactId", contactId);
      const localVarPath = `/API/contacts/{contactId}/telephones`.replace(
        `{${"contactId"}}`,
        encodeURIComponent(String(contactId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} page
     * @param {number} limit
     * @param {string} [byEmail]
     * @param {string} [byTelephone]
     * @param {string} [byName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContacts: async (
      page: number,
      limit: number,
      byEmail?: string,
      byTelephone?: string,
      byName?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getContacts", "page", page);
      // verify required parameter 'limit' is not null or undefined
      assertParamExists("getContacts", "limit", limit);
      const localVarPath = `/API/contacts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (byEmail !== undefined) {
        localVarQueryParameter["byEmail"] = byEmail;
      }

      if (byTelephone !== undefined) {
        localVarQueryParameter["byTelephone"] = byTelephone;
      }

      if (byName !== undefined) {
        localVarQueryParameter["byName"] = byName;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} page
     * @param {number} limit
     * @param {string} [byEmail]
     * @param {string} [byTelephone]
     * @param {string} [byName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContacts1: async (
      page: number,
      limit: number,
      byEmail?: string,
      byTelephone?: string,
      byName?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getContacts1", "page", page);
      // verify required parameter 'limit' is not null or undefined
      assertParamExists("getContacts1", "limit", limit);
      const localVarPath = `/API/contacts/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (byEmail !== undefined) {
        localVarQueryParameter["byEmail"] = byEmail;
      }

      if (byTelephone !== undefined) {
        localVarQueryParameter["byTelephone"] = byTelephone;
      }

      if (byName !== undefined) {
        localVarQueryParameter["byName"] = byName;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} contactId
     * @param {CreateContactDTO} createContactDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContact: async (
      contactId: number,
      createContactDTO: CreateContactDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("updateContact", "contactId", contactId);
      // verify required parameter 'createContactDTO' is not null or undefined
      assertParamExists("updateContact", "createContactDTO", createContactDTO);
      const localVarPath = `/API/contacts/{contactId}`.replace(
        `{${"contactId"}}`,
        encodeURIComponent(String(contactId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createContactDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} contactId
     * @param {number} addressId
     * @param {CreateAddressDTO} createAddressDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContactAddress: async (
      contactId: number,
      addressId: number,
      createAddressDTO: CreateAddressDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("updateContactAddress", "contactId", contactId);
      // verify required parameter 'addressId' is not null or undefined
      assertParamExists("updateContactAddress", "addressId", addressId);
      // verify required parameter 'createAddressDTO' is not null or undefined
      assertParamExists(
        "updateContactAddress",
        "createAddressDTO",
        createAddressDTO,
      );
      const localVarPath = `/API/contacts/{contactId}/addresses/{addressId}`
        .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)))
        .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createAddressDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} contactId
     * @param {number} emailId
     * @param {CreateEmailDTO} createEmailDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContactEmailById: async (
      contactId: number,
      emailId: number,
      createEmailDTO: CreateEmailDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("updateContactEmailById", "contactId", contactId);
      // verify required parameter 'emailId' is not null or undefined
      assertParamExists("updateContactEmailById", "emailId", emailId);
      // verify required parameter 'createEmailDTO' is not null or undefined
      assertParamExists(
        "updateContactEmailById",
        "createEmailDTO",
        createEmailDTO,
      );
      const localVarPath = `/API/contacts/{contactId}/emails/{emailId}`
        .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)))
        .replace(`{${"emailId"}}`, encodeURIComponent(String(emailId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createEmailDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} contactId
     * @param {number} telephoneId
     * @param {CreateTelephoneDTO} createTelephoneDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContactTelephone: async (
      contactId: number,
      telephoneId: number,
      createTelephoneDTO: CreateTelephoneDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactId' is not null or undefined
      assertParamExists("updateContactTelephone", "contactId", contactId);
      // verify required parameter 'telephoneId' is not null or undefined
      assertParamExists("updateContactTelephone", "telephoneId", telephoneId);
      // verify required parameter 'createTelephoneDTO' is not null or undefined
      assertParamExists(
        "updateContactTelephone",
        "createTelephoneDTO",
        createTelephoneDTO,
      );
      const localVarPath = `/API/contacts/{contactId}/telephones/{telephoneId}`
        .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)))
        .replace(`{${"telephoneId"}}`, encodeURIComponent(String(telephoneId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createTelephoneDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ContactControllerApi - functional programming interface
 * @export
 */
export const ContactControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ContactControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateContactDTO} createContactDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createContact(
      createContactDTO: CreateContactDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createContact(
        createContactDTO,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.createContact"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateContactDTO} createContactDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createContact1(
      createContactDTO: CreateContactDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createContact1(
        createContactDTO,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.createContact1"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} contactId
     * @param {CreateAddressDTO} createAddressDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createContactAddress(
      contactId: number,
      createAddressDTO: CreateAddressDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createContactAddress(
          contactId,
          createAddressDTO,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.createContactAddress"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} contactId
     * @param {CreateEmailDTO} createEmailDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createContactEmail(
      contactId: number,
      createEmailDTO: CreateEmailDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createContactEmail(
          contactId,
          createEmailDTO,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.createContactEmail"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} contactId
     * @param {CreateTelephoneDTO} createTelephoneDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createContactTelephone(
      contactId: number,
      createTelephoneDTO: CreateTelephoneDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createContactTelephone(
          contactId,
          createTelephoneDTO,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.createContactTelephone"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} contactId
     * @param {number} addressId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteContactAddress(
      contactId: number,
      addressId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteContactAddress(
          contactId,
          addressId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.deleteContactAddress"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteContactById(
      contactId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteContactById(contactId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.deleteContactById"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} contactId
     * @param {number} emailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteContactEmailById(
      contactId: number,
      emailId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteContactEmailById(
          contactId,
          emailId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.deleteContactEmailById"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} contactId
     * @param {number} telephoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteContactTelephoneById(
      contactId: number,
      telephoneId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteContactTelephoneById(
          contactId,
          telephoneId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.deleteContactTelephoneById"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} contactId
     * @param {number} addressId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getContactAddressById(
      contactId: number,
      addressId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getContactAddressById(
          contactId,
          addressId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.getContactAddressById"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getContactAddresses(
      contactId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<AddressDTO>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getContactAddresses(contactId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.getContactAddresses"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getContactById(
      contactId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getContactById(
        contactId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.getContactById"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} contactId
     * @param {number} emailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getContactEmailById(
      contactId: number,
      emailId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getContactEmailById(
          contactId,
          emailId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.getContactEmailById"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getContactEmails(
      contactId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<EmailDTO>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getContactEmails(contactId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.getContactEmails"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} contactId
     * @param {number} telephoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getContactTelephoneById(
      contactId: number,
      telephoneId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TelephoneDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getContactTelephoneById(
          contactId,
          telephoneId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.getContactTelephoneById"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getContactTelephones(
      contactId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<TelephoneDTO>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getContactTelephones(
          contactId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.getContactTelephones"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} page
     * @param {number} limit
     * @param {string} [byEmail]
     * @param {string} [byTelephone]
     * @param {string} [byName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getContacts(
      page: number,
      limit: number,
      byEmail?: string,
      byTelephone?: string,
      byName?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageContactDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getContacts(
        page,
        limit,
        byEmail,
        byTelephone,
        byName,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.getContacts"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} page
     * @param {number} limit
     * @param {string} [byEmail]
     * @param {string} [byTelephone]
     * @param {string} [byName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getContacts1(
      page: number,
      limit: number,
      byEmail?: string,
      byTelephone?: string,
      byName?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageContactDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getContacts1(
        page,
        limit,
        byEmail,
        byTelephone,
        byName,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.getContacts1"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} contactId
     * @param {CreateContactDTO} createContactDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateContact(
      contactId: number,
      createContactDTO: CreateContactDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateContact(
        contactId,
        createContactDTO,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.updateContact"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} contactId
     * @param {number} addressId
     * @param {CreateAddressDTO} createAddressDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateContactAddress(
      contactId: number,
      addressId: number,
      createAddressDTO: CreateAddressDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateContactAddress(
          contactId,
          addressId,
          createAddressDTO,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.updateContactAddress"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} contactId
     * @param {number} emailId
     * @param {CreateEmailDTO} createEmailDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateContactEmailById(
      contactId: number,
      emailId: number,
      createEmailDTO: CreateEmailDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateContactEmailById(
          contactId,
          emailId,
          createEmailDTO,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.updateContactEmailById"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} contactId
     * @param {number} telephoneId
     * @param {CreateTelephoneDTO} createTelephoneDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateContactTelephone(
      contactId: number,
      telephoneId: number,
      createTelephoneDTO: CreateTelephoneDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateContactTelephone(
          contactId,
          telephoneId,
          createTelephoneDTO,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ContactControllerApi.updateContactTelephone"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ContactControllerApi - factory interface
 * @export
 */
export const ContactControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ContactControllerApiFp(configuration);
  return {
    /**
     *
     * @param {CreateContactDTO} createContactDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContact(
      createContactDTO: CreateContactDTO,
      options?: any,
    ): AxiosPromise<ContactDTO> {
      return localVarFp
        .createContact(createContactDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateContactDTO} createContactDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContact1(
      createContactDTO: CreateContactDTO,
      options?: any,
    ): AxiosPromise<ContactDTO> {
      return localVarFp
        .createContact1(createContactDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} contactId
     * @param {CreateAddressDTO} createAddressDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContactAddress(
      contactId: number,
      createAddressDTO: CreateAddressDTO,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .createContactAddress(contactId, createAddressDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} contactId
     * @param {CreateEmailDTO} createEmailDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContactEmail(
      contactId: number,
      createEmailDTO: CreateEmailDTO,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .createContactEmail(contactId, createEmailDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} contactId
     * @param {CreateTelephoneDTO} createTelephoneDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createContactTelephone(
      contactId: number,
      createTelephoneDTO: CreateTelephoneDTO,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .createContactTelephone(contactId, createTelephoneDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} contactId
     * @param {number} addressId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContactAddress(
      contactId: number,
      addressId: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteContactAddress(contactId, addressId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContactById(contactId: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteContactById(contactId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} contactId
     * @param {number} emailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContactEmailById(
      contactId: number,
      emailId: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteContactEmailById(contactId, emailId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} contactId
     * @param {number} telephoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContactTelephoneById(
      contactId: number,
      telephoneId: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteContactTelephoneById(contactId, telephoneId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} contactId
     * @param {number} addressId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactAddressById(
      contactId: number,
      addressId: number,
      options?: any,
    ): AxiosPromise<AddressDTO> {
      return localVarFp
        .getContactAddressById(contactId, addressId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactAddresses(
      contactId: number,
      options?: any,
    ): AxiosPromise<Array<AddressDTO>> {
      return localVarFp
        .getContactAddresses(contactId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactById(contactId: number, options?: any): AxiosPromise<ContactDTO> {
      return localVarFp
        .getContactById(contactId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} contactId
     * @param {number} emailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactEmailById(
      contactId: number,
      emailId: number,
      options?: any,
    ): AxiosPromise<EmailDTO> {
      return localVarFp
        .getContactEmailById(contactId, emailId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactEmails(
      contactId: number,
      options?: any,
    ): AxiosPromise<Array<EmailDTO>> {
      return localVarFp
        .getContactEmails(contactId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} contactId
     * @param {number} telephoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactTelephoneById(
      contactId: number,
      telephoneId: number,
      options?: any,
    ): AxiosPromise<TelephoneDTO> {
      return localVarFp
        .getContactTelephoneById(contactId, telephoneId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} contactId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactTelephones(
      contactId: number,
      options?: any,
    ): AxiosPromise<Array<TelephoneDTO>> {
      return localVarFp
        .getContactTelephones(contactId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} page
     * @param {number} limit
     * @param {string} [byEmail]
     * @param {string} [byTelephone]
     * @param {string} [byName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContacts(
      page: number,
      limit: number,
      byEmail?: string,
      byTelephone?: string,
      byName?: string,
      options?: any,
    ): AxiosPromise<PageContactDTO> {
      return localVarFp
        .getContacts(page, limit, byEmail, byTelephone, byName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} page
     * @param {number} limit
     * @param {string} [byEmail]
     * @param {string} [byTelephone]
     * @param {string} [byName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContacts1(
      page: number,
      limit: number,
      byEmail?: string,
      byTelephone?: string,
      byName?: string,
      options?: any,
    ): AxiosPromise<PageContactDTO> {
      return localVarFp
        .getContacts1(page, limit, byEmail, byTelephone, byName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} contactId
     * @param {CreateContactDTO} createContactDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContact(
      contactId: number,
      createContactDTO: CreateContactDTO,
      options?: any,
    ): AxiosPromise<ContactDTO> {
      return localVarFp
        .updateContact(contactId, createContactDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} contactId
     * @param {number} addressId
     * @param {CreateAddressDTO} createAddressDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContactAddress(
      contactId: number,
      addressId: number,
      createAddressDTO: CreateAddressDTO,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .updateContactAddress(contactId, addressId, createAddressDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} contactId
     * @param {number} emailId
     * @param {CreateEmailDTO} createEmailDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContactEmailById(
      contactId: number,
      emailId: number,
      createEmailDTO: CreateEmailDTO,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .updateContactEmailById(contactId, emailId, createEmailDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} contactId
     * @param {number} telephoneId
     * @param {CreateTelephoneDTO} createTelephoneDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContactTelephone(
      contactId: number,
      telephoneId: number,
      createTelephoneDTO: CreateTelephoneDTO,
      options?: any,
    ): AxiosPromise<object> {
      return localVarFp
        .updateContactTelephone(
          contactId,
          telephoneId,
          createTelephoneDTO,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ContactControllerApi - object-oriented interface
 * @export
 * @class ContactControllerApi
 * @extends {BaseAPI}
 */
export class ContactControllerApi extends BaseAPI {
  /**
   *
   * @param {CreateContactDTO} createContactDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public createContact(
    createContactDTO: CreateContactDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return ContactControllerApiFp(this.configuration)
      .createContact(createContactDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateContactDTO} createContactDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public createContact1(
    createContactDTO: CreateContactDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return ContactControllerApiFp(this.configuration)
      .createContact1(createContactDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} contactId
   * @param {CreateAddressDTO} createAddressDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public createContactAddress(
    contactId: number,
    createAddressDTO: CreateAddressDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return ContactControllerApiFp(this.configuration)
      .createContactAddress(contactId, createAddressDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} contactId
   * @param {CreateEmailDTO} createEmailDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public createContactEmail(
    contactId: number,
    createEmailDTO: CreateEmailDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return ContactControllerApiFp(this.configuration)
      .createContactEmail(contactId, createEmailDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} contactId
   * @param {CreateTelephoneDTO} createTelephoneDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public createContactTelephone(
    contactId: number,
    createTelephoneDTO: CreateTelephoneDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return ContactControllerApiFp(this.configuration)
      .createContactTelephone(contactId, createTelephoneDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} contactId
   * @param {number} addressId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public deleteContactAddress(
    contactId: number,
    addressId: number,
    options?: RawAxiosRequestConfig,
  ) {
    return ContactControllerApiFp(this.configuration)
      .deleteContactAddress(contactId, addressId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} contactId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public deleteContactById(contactId: number, options?: RawAxiosRequestConfig) {
    return ContactControllerApiFp(this.configuration)
      .deleteContactById(contactId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} contactId
   * @param {number} emailId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public deleteContactEmailById(
    contactId: number,
    emailId: number,
    options?: RawAxiosRequestConfig,
  ) {
    return ContactControllerApiFp(this.configuration)
      .deleteContactEmailById(contactId, emailId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} contactId
   * @param {number} telephoneId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public deleteContactTelephoneById(
    contactId: number,
    telephoneId: number,
    options?: RawAxiosRequestConfig,
  ) {
    return ContactControllerApiFp(this.configuration)
      .deleteContactTelephoneById(contactId, telephoneId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} contactId
   * @param {number} addressId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public getContactAddressById(
    contactId: number,
    addressId: number,
    options?: RawAxiosRequestConfig,
  ) {
    return ContactControllerApiFp(this.configuration)
      .getContactAddressById(contactId, addressId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} contactId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public getContactAddresses(
    contactId: number,
    options?: RawAxiosRequestConfig,
  ) {
    return ContactControllerApiFp(this.configuration)
      .getContactAddresses(contactId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} contactId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public getContactById(contactId: number, options?: RawAxiosRequestConfig) {
    return ContactControllerApiFp(this.configuration)
      .getContactById(contactId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} contactId
   * @param {number} emailId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public getContactEmailById(
    contactId: number,
    emailId: number,
    options?: RawAxiosRequestConfig,
  ) {
    return ContactControllerApiFp(this.configuration)
      .getContactEmailById(contactId, emailId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} contactId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public getContactEmails(contactId: number, options?: RawAxiosRequestConfig) {
    return ContactControllerApiFp(this.configuration)
      .getContactEmails(contactId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} contactId
   * @param {number} telephoneId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public getContactTelephoneById(
    contactId: number,
    telephoneId: number,
    options?: RawAxiosRequestConfig,
  ) {
    return ContactControllerApiFp(this.configuration)
      .getContactTelephoneById(contactId, telephoneId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} contactId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public getContactTelephones(
    contactId: number,
    options?: RawAxiosRequestConfig,
  ) {
    return ContactControllerApiFp(this.configuration)
      .getContactTelephones(contactId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} page
   * @param {number} limit
   * @param {string} [byEmail]
   * @param {string} [byTelephone]
   * @param {string} [byName]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public getContacts(
    page: number,
    limit: number,
    byEmail?: string,
    byTelephone?: string,
    byName?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ContactControllerApiFp(this.configuration)
      .getContacts(page, limit, byEmail, byTelephone, byName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} page
   * @param {number} limit
   * @param {string} [byEmail]
   * @param {string} [byTelephone]
   * @param {string} [byName]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public getContacts1(
    page: number,
    limit: number,
    byEmail?: string,
    byTelephone?: string,
    byName?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ContactControllerApiFp(this.configuration)
      .getContacts1(page, limit, byEmail, byTelephone, byName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} contactId
   * @param {CreateContactDTO} createContactDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public updateContact(
    contactId: number,
    createContactDTO: CreateContactDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return ContactControllerApiFp(this.configuration)
      .updateContact(contactId, createContactDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} contactId
   * @param {number} addressId
   * @param {CreateAddressDTO} createAddressDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public updateContactAddress(
    contactId: number,
    addressId: number,
    createAddressDTO: CreateAddressDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return ContactControllerApiFp(this.configuration)
      .updateContactAddress(contactId, addressId, createAddressDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} contactId
   * @param {number} emailId
   * @param {CreateEmailDTO} createEmailDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public updateContactEmailById(
    contactId: number,
    emailId: number,
    createEmailDTO: CreateEmailDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return ContactControllerApiFp(this.configuration)
      .updateContactEmailById(contactId, emailId, createEmailDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} contactId
   * @param {number} telephoneId
   * @param {CreateTelephoneDTO} createTelephoneDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactControllerApi
   */
  public updateContactTelephone(
    contactId: number,
    telephoneId: number,
    createTelephoneDTO: CreateTelephoneDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return ContactControllerApiFp(this.configuration)
      .updateContactTelephone(
        contactId,
        telephoneId,
        createTelephoneDTO,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CustomerControllerApi - axios parameter creator
 * @export
 */
export const CustomerControllerApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {CreateCustomerDTO} createCustomerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer: async (
      createCustomerDTO: CreateCustomerDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createCustomerDTO' is not null or undefined
      assertParamExists(
        "createCustomer",
        "createCustomerDTO",
        createCustomerDTO,
      );
      const localVarPath = `/API/customers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCustomerDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateCustomerDTO} createCustomerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer1: async (
      createCustomerDTO: CreateCustomerDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createCustomerDTO' is not null or undefined
      assertParamExists(
        "createCustomer1",
        "createCustomerDTO",
        createCustomerDTO,
      );
      const localVarPath = `/API/customers/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCustomerDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomer: async (
      customerId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'customerId' is not null or undefined
      assertParamExists("deleteCustomer", "customerId", customerId);
      const localVarPath = `/API/customers/{customerId}`.replace(
        `{${"customerId"}}`,
        encodeURIComponent(String(customerId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerById: async (
      customerId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'customerId' is not null or undefined
      assertParamExists("getCustomerById", "customerId", customerId);
      const localVarPath = `/API/customers/{customerId}`.replace(
        `{${"customerId"}}`,
        encodeURIComponent(String(customerId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} page
     * @param {number} limit
     * @param {CustomerFilters} customerFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomers: async (
      page: number,
      limit: number,
      customerFilters: CustomerFilters,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getCustomers", "page", page);
      // verify required parameter 'limit' is not null or undefined
      assertParamExists("getCustomers", "limit", limit);
      // verify required parameter 'customerFilters' is not null or undefined
      assertParamExists("getCustomers", "customerFilters", customerFilters);
      const localVarPath = `/API/customers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (customerFilters !== undefined) {
        for (const [key, value] of Object.entries(customerFilters)) {
          localVarQueryParameter[key] = value;
        }
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} page
     * @param {number} limit
     * @param {CustomerFilters} customerFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomers1: async (
      page: number,
      limit: number,
      customerFilters: CustomerFilters,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getCustomers1", "page", page);
      // verify required parameter 'limit' is not null or undefined
      assertParamExists("getCustomers1", "limit", limit);
      // verify required parameter 'customerFilters' is not null or undefined
      assertParamExists("getCustomers1", "customerFilters", customerFilters);
      const localVarPath = `/API/customers/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (customerFilters !== undefined) {
        for (const [key, value] of Object.entries(customerFilters)) {
          localVarQueryParameter[key] = value;
        }
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} customerId
     * @param {ContactIdDTO} contactIdDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerContact: async (
      customerId: number,
      contactIdDTO: ContactIdDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'customerId' is not null or undefined
      assertParamExists("updateCustomerContact", "customerId", customerId);
      // verify required parameter 'contactIdDTO' is not null or undefined
      assertParamExists("updateCustomerContact", "contactIdDTO", contactIdDTO);
      const localVarPath = `/API/customers/{customerId}/contact`.replace(
        `{${"customerId"}}`,
        encodeURIComponent(String(customerId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        contactIdDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} customerId
     * @param {CustomerNoteDTO} customerNoteDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerNote: async (
      customerId: number,
      customerNoteDTO: CustomerNoteDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'customerId' is not null or undefined
      assertParamExists("updateCustomerNote", "customerId", customerId);
      // verify required parameter 'customerNoteDTO' is not null or undefined
      assertParamExists(
        "updateCustomerNote",
        "customerNoteDTO",
        customerNoteDTO,
      );
      const localVarPath = `/API/customers/{customerId}/note`.replace(
        `{${"customerId"}}`,
        encodeURIComponent(String(customerId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        customerNoteDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CustomerControllerApi - functional programming interface
 * @export
 */
export const CustomerControllerApiFp = function (
  configuration?: Configuration,
) {
  const localVarAxiosParamCreator =
    CustomerControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateCustomerDTO} createCustomerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCustomer(
      createCustomerDTO: CreateCustomerDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomer(
        createCustomerDTO,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CustomerControllerApi.createCustomer"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateCustomerDTO} createCustomerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCustomer1(
      createCustomerDTO: CreateCustomerDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomer1(
        createCustomerDTO,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CustomerControllerApi.createCustomer1"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCustomer(
      customerId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomer(
        customerId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CustomerControllerApi.deleteCustomer"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCustomerById(
      customerId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerById(
        customerId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CustomerControllerApi.getCustomerById"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} page
     * @param {number} limit
     * @param {CustomerFilters} customerFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCustomers(
      page: number,
      limit: number,
      customerFilters: CustomerFilters,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PageCustomerDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomers(
        page,
        limit,
        customerFilters,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CustomerControllerApi.getCustomers"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} page
     * @param {number} limit
     * @param {CustomerFilters} customerFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCustomers1(
      page: number,
      limit: number,
      customerFilters: CustomerFilters,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PageCustomerDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomers1(
        page,
        limit,
        customerFilters,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CustomerControllerApi.getCustomers1"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} customerId
     * @param {ContactIdDTO} contactIdDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateCustomerContact(
      customerId: number,
      contactIdDTO: ContactIdDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateCustomerContact(
          customerId,
          contactIdDTO,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CustomerControllerApi.updateCustomerContact"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} customerId
     * @param {CustomerNoteDTO} customerNoteDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateCustomerNote(
      customerId: number,
      customerNoteDTO: CustomerNoteDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateCustomerNote(
          customerId,
          customerNoteDTO,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["CustomerControllerApi.updateCustomerNote"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * CustomerControllerApi - factory interface
 * @export
 */
export const CustomerControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = CustomerControllerApiFp(configuration);
  return {
    /**
     *
     * @param {CreateCustomerDTO} createCustomerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer(
      createCustomerDTO: CreateCustomerDTO,
      options?: any,
    ): AxiosPromise<CustomerDTO> {
      return localVarFp
        .createCustomer(createCustomerDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateCustomerDTO} createCustomerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomer1(
      createCustomerDTO: CreateCustomerDTO,
      options?: any,
    ): AxiosPromise<CustomerDTO> {
      return localVarFp
        .createCustomer1(createCustomerDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomer(customerId: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteCustomer(customerId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} customerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerById(
      customerId: number,
      options?: any,
    ): AxiosPromise<CustomerDTO> {
      return localVarFp
        .getCustomerById(customerId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} page
     * @param {number} limit
     * @param {CustomerFilters} customerFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomers(
      page: number,
      limit: number,
      customerFilters: CustomerFilters,
      options?: any,
    ): AxiosPromise<PageCustomerDTO> {
      return localVarFp
        .getCustomers(page, limit, customerFilters, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} page
     * @param {number} limit
     * @param {CustomerFilters} customerFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomers1(
      page: number,
      limit: number,
      customerFilters: CustomerFilters,
      options?: any,
    ): AxiosPromise<PageCustomerDTO> {
      return localVarFp
        .getCustomers1(page, limit, customerFilters, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} customerId
     * @param {ContactIdDTO} contactIdDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerContact(
      customerId: number,
      contactIdDTO: ContactIdDTO,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updateCustomerContact(customerId, contactIdDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} customerId
     * @param {CustomerNoteDTO} customerNoteDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerNote(
      customerId: number,
      customerNoteDTO: CustomerNoteDTO,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updateCustomerNote(customerId, customerNoteDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CustomerControllerApi - object-oriented interface
 * @export
 * @class CustomerControllerApi
 * @extends {BaseAPI}
 */
export class CustomerControllerApi extends BaseAPI {
  /**
   *
   * @param {CreateCustomerDTO} createCustomerDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomerControllerApi
   */
  public createCustomer(
    createCustomerDTO: CreateCustomerDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return CustomerControllerApiFp(this.configuration)
      .createCustomer(createCustomerDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateCustomerDTO} createCustomerDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomerControllerApi
   */
  public createCustomer1(
    createCustomerDTO: CreateCustomerDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return CustomerControllerApiFp(this.configuration)
      .createCustomer1(createCustomerDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} customerId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomerControllerApi
   */
  public deleteCustomer(customerId: number, options?: RawAxiosRequestConfig) {
    return CustomerControllerApiFp(this.configuration)
      .deleteCustomer(customerId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} customerId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomerControllerApi
   */
  public getCustomerById(customerId: number, options?: RawAxiosRequestConfig) {
    return CustomerControllerApiFp(this.configuration)
      .getCustomerById(customerId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} page
   * @param {number} limit
   * @param {CustomerFilters} customerFilters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomerControllerApi
   */
  public getCustomers(
    page: number,
    limit: number,
    customerFilters: CustomerFilters,
    options?: RawAxiosRequestConfig,
  ) {
    return CustomerControllerApiFp(this.configuration)
      .getCustomers(page, limit, customerFilters, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} page
   * @param {number} limit
   * @param {CustomerFilters} customerFilters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomerControllerApi
   */
  public getCustomers1(
    page: number,
    limit: number,
    customerFilters: CustomerFilters,
    options?: RawAxiosRequestConfig,
  ) {
    return CustomerControllerApiFp(this.configuration)
      .getCustomers1(page, limit, customerFilters, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} customerId
   * @param {ContactIdDTO} contactIdDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomerControllerApi
   */
  public updateCustomerContact(
    customerId: number,
    contactIdDTO: ContactIdDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return CustomerControllerApiFp(this.configuration)
      .updateCustomerContact(customerId, contactIdDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} customerId
   * @param {CustomerNoteDTO} customerNoteDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomerControllerApi
   */
  public updateCustomerNote(
    customerId: number,
    customerNoteDTO: CustomerNoteDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return CustomerControllerApiFp(this.configuration)
      .updateCustomerNote(customerId, customerNoteDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * JobOfferControllerApi - axios parameter creator
 * @export
 */
export const JobOfferControllerApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {number} jobOfferId
     * @param {CreateJobOfferHistoryNoteDTO} createJobOfferHistoryNoteDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNoteByJobOfferId: async (
      jobOfferId: number,
      createJobOfferHistoryNoteDTO: CreateJobOfferHistoryNoteDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'jobOfferId' is not null or undefined
      assertParamExists("addNoteByJobOfferId", "jobOfferId", jobOfferId);
      // verify required parameter 'createJobOfferHistoryNoteDTO' is not null or undefined
      assertParamExists(
        "addNoteByJobOfferId",
        "createJobOfferHistoryNoteDTO",
        createJobOfferHistoryNoteDTO,
      );
      const localVarPath = `/API/joboffers/{jobOfferId}/notes`.replace(
        `{${"jobOfferId"}}`,
        encodeURIComponent(String(jobOfferId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createJobOfferHistoryNoteDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {UpdateJobOfferDetailsDTO} updateJobOfferDetailsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeJobOfferDetails: async (
      jobOfferId: number,
      updateJobOfferDetailsDTO: UpdateJobOfferDetailsDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'jobOfferId' is not null or undefined
      assertParamExists("changeJobOfferDetails", "jobOfferId", jobOfferId);
      // verify required parameter 'updateJobOfferDetailsDTO' is not null or undefined
      assertParamExists(
        "changeJobOfferDetails",
        "updateJobOfferDetailsDTO",
        updateJobOfferDetailsDTO,
      );
      const localVarPath = `/API/joboffers/{jobOfferId}/details`.replace(
        `{${"jobOfferId"}}`,
        encodeURIComponent(String(jobOfferId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateJobOfferDetailsDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {UpdateJobOfferStatusDTO} updateJobOfferStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeJobOfferStatus: async (
      jobOfferId: number,
      updateJobOfferStatusDTO: UpdateJobOfferStatusDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'jobOfferId' is not null or undefined
      assertParamExists("changeJobOfferStatus", "jobOfferId", jobOfferId);
      // verify required parameter 'updateJobOfferStatusDTO' is not null or undefined
      assertParamExists(
        "changeJobOfferStatus",
        "updateJobOfferStatusDTO",
        updateJobOfferStatusDTO,
      );
      const localVarPath = `/API/joboffers/{jobOfferId}`.replace(
        `{${"jobOfferId"}}`,
        encodeURIComponent(String(jobOfferId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateJobOfferStatusDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateJobOfferDTO} createJobOfferDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createJobOffer: async (
      createJobOfferDTO: CreateJobOfferDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createJobOfferDTO' is not null or undefined
      assertParamExists(
        "createJobOffer",
        "createJobOfferDTO",
        createJobOfferDTO,
      );
      const localVarPath = `/API/joboffers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createJobOfferDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateJobOfferDTO} createJobOfferDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createJobOffer1: async (
      createJobOfferDTO: CreateJobOfferDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createJobOfferDTO' is not null or undefined
      assertParamExists(
        "createJobOffer1",
        "createJobOfferDTO",
        createJobOfferDTO,
      );
      const localVarPath = `/API/joboffers/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createJobOfferDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteJobOffer: async (
      jobOfferId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'jobOfferId' is not null or undefined
      assertParamExists("deleteJobOffer", "jobOfferId", jobOfferId);
      const localVarPath = `/API/joboffers/{jobOfferId}`.replace(
        `{${"jobOfferId"}}`,
        encodeURIComponent(String(jobOfferId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJobOfferById: async (
      jobOfferId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'jobOfferId' is not null or undefined
      assertParamExists("getJobOfferById", "jobOfferId", jobOfferId);
      const localVarPath = `/API/joboffers/{jobOfferId}`.replace(
        `{${"jobOfferId"}}`,
        encodeURIComponent(String(jobOfferId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJobOfferValue: async (
      jobOfferId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'jobOfferId' is not null or undefined
      assertParamExists("getJobOfferValue", "jobOfferId", jobOfferId);
      const localVarPath = `/API/joboffers/{jobOfferId}/value`.replace(
        `{${"jobOfferId"}}`,
        encodeURIComponent(String(jobOfferId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {GetJobOffers} getJobOffers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJobOffers: async (
      getJobOffers: GetJobOffers,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'getJobOffers' is not null or undefined
      assertParamExists("getJobOffers", "getJobOffers", getJobOffers);
      const localVarPath = `/API/joboffers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (getJobOffers !== undefined) {
        for (const [key, value] of Object.entries(getJobOffers)) {
          localVarQueryParameter[key] = value;
        }
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {GetJobOffers} getJobOffers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJobOffers1: async (
      getJobOffers: GetJobOffers,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'getJobOffers' is not null or undefined
      assertParamExists("getJobOffers1", "getJobOffers", getJobOffers);
      const localVarPath = `/API/joboffers/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (getJobOffers !== undefined) {
        for (const [key, value] of Object.entries(getJobOffers)) {
          localVarQueryParameter[key] = value;
        }
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {number} noteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNoteById: async (
      jobOfferId: number,
      noteId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'jobOfferId' is not null or undefined
      assertParamExists("getNoteById", "jobOfferId", jobOfferId);
      // verify required parameter 'noteId' is not null or undefined
      assertParamExists("getNoteById", "noteId", noteId);
      const localVarPath = `/API/joboffers/{jobOfferId}/notes/{noteId}`
        .replace(`{${"jobOfferId"}}`, encodeURIComponent(String(jobOfferId)))
        .replace(`{${"noteId"}}`, encodeURIComponent(String(noteId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotesByJobOfferId: async (
      jobOfferId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'jobOfferId' is not null or undefined
      assertParamExists("getNotesByJobOfferId", "jobOfferId", jobOfferId);
      const localVarPath = `/API/joboffers/{jobOfferId}/notes`.replace(
        `{${"jobOfferId"}}`,
        encodeURIComponent(String(jobOfferId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {number} noteId
     * @param {CreateJobOfferHistoryNoteDTO} createJobOfferHistoryNoteDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNoteById: async (
      jobOfferId: number,
      noteId: number,
      createJobOfferHistoryNoteDTO: CreateJobOfferHistoryNoteDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'jobOfferId' is not null or undefined
      assertParamExists("updateNoteById", "jobOfferId", jobOfferId);
      // verify required parameter 'noteId' is not null or undefined
      assertParamExists("updateNoteById", "noteId", noteId);
      // verify required parameter 'createJobOfferHistoryNoteDTO' is not null or undefined
      assertParamExists(
        "updateNoteById",
        "createJobOfferHistoryNoteDTO",
        createJobOfferHistoryNoteDTO,
      );
      const localVarPath = `/API/joboffers/{jobOfferId}/notes/{noteId}`
        .replace(`{${"jobOfferId"}}`, encodeURIComponent(String(jobOfferId)))
        .replace(`{${"noteId"}}`, encodeURIComponent(String(noteId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createJobOfferHistoryNoteDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * JobOfferControllerApi - functional programming interface
 * @export
 */
export const JobOfferControllerApiFp = function (
  configuration?: Configuration,
) {
  const localVarAxiosParamCreator =
    JobOfferControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} jobOfferId
     * @param {CreateJobOfferHistoryNoteDTO} createJobOfferHistoryNoteDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addNoteByJobOfferId(
      jobOfferId: number,
      createJobOfferHistoryNoteDTO: CreateJobOfferHistoryNoteDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<JobOfferHistoryDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.addNoteByJobOfferId(
          jobOfferId,
          createJobOfferHistoryNoteDTO,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["JobOfferControllerApi.addNoteByJobOfferId"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {UpdateJobOfferDetailsDTO} updateJobOfferDetailsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changeJobOfferDetails(
      jobOfferId: number,
      updateJobOfferDetailsDTO: UpdateJobOfferDetailsDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobOfferDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.changeJobOfferDetails(
          jobOfferId,
          updateJobOfferDetailsDTO,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["JobOfferControllerApi.changeJobOfferDetails"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {UpdateJobOfferStatusDTO} updateJobOfferStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changeJobOfferStatus(
      jobOfferId: number,
      updateJobOfferStatusDTO: UpdateJobOfferStatusDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobOfferDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.changeJobOfferStatus(
          jobOfferId,
          updateJobOfferStatusDTO,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["JobOfferControllerApi.changeJobOfferStatus"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateJobOfferDTO} createJobOfferDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createJobOffer(
      createJobOfferDTO: CreateJobOfferDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobOfferDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createJobOffer(
        createJobOfferDTO,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["JobOfferControllerApi.createJobOffer"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateJobOfferDTO} createJobOfferDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createJobOffer1(
      createJobOfferDTO: CreateJobOfferDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobOfferDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createJobOffer1(
        createJobOfferDTO,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["JobOfferControllerApi.createJobOffer1"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteJobOffer(
      jobOfferId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteJobOffer(
        jobOfferId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["JobOfferControllerApi.deleteJobOffer"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getJobOfferById(
      jobOfferId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobOfferDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getJobOfferById(
        jobOfferId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["JobOfferControllerApi.getJobOfferById"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getJobOfferValue(
      jobOfferId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getJobOfferValue(jobOfferId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["JobOfferControllerApi.getJobOfferValue"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {GetJobOffers} getJobOffers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getJobOffers(
      getJobOffers: GetJobOffers,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PageJobOfferDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getJobOffers(
        getJobOffers,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["JobOfferControllerApi.getJobOffers"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {GetJobOffers} getJobOffers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getJobOffers1(
      getJobOffers: GetJobOffers,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PageJobOfferDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getJobOffers1(
        getJobOffers,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["JobOfferControllerApi.getJobOffers1"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {number} noteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getNoteById(
      jobOfferId: number,
      noteId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<JobOfferHistoryDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getNoteById(
        jobOfferId,
        noteId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["JobOfferControllerApi.getNoteById"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getNotesByJobOfferId(
      jobOfferId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<JobOfferHistoryDTO>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getNotesByJobOfferId(
          jobOfferId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["JobOfferControllerApi.getNotesByJobOfferId"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {number} noteId
     * @param {CreateJobOfferHistoryNoteDTO} createJobOfferHistoryNoteDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateNoteById(
      jobOfferId: number,
      noteId: number,
      createJobOfferHistoryNoteDTO: CreateJobOfferHistoryNoteDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<JobOfferHistoryDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateNoteById(
        jobOfferId,
        noteId,
        createJobOfferHistoryNoteDTO,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["JobOfferControllerApi.updateNoteById"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * JobOfferControllerApi - factory interface
 * @export
 */
export const JobOfferControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = JobOfferControllerApiFp(configuration);
  return {
    /**
     *
     * @param {number} jobOfferId
     * @param {CreateJobOfferHistoryNoteDTO} createJobOfferHistoryNoteDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNoteByJobOfferId(
      jobOfferId: number,
      createJobOfferHistoryNoteDTO: CreateJobOfferHistoryNoteDTO,
      options?: any,
    ): AxiosPromise<JobOfferHistoryDTO> {
      return localVarFp
        .addNoteByJobOfferId(jobOfferId, createJobOfferHistoryNoteDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {UpdateJobOfferDetailsDTO} updateJobOfferDetailsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeJobOfferDetails(
      jobOfferId: number,
      updateJobOfferDetailsDTO: UpdateJobOfferDetailsDTO,
      options?: any,
    ): AxiosPromise<JobOfferDTO> {
      return localVarFp
        .changeJobOfferDetails(jobOfferId, updateJobOfferDetailsDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {UpdateJobOfferStatusDTO} updateJobOfferStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeJobOfferStatus(
      jobOfferId: number,
      updateJobOfferStatusDTO: UpdateJobOfferStatusDTO,
      options?: any,
    ): AxiosPromise<JobOfferDTO> {
      return localVarFp
        .changeJobOfferStatus(jobOfferId, updateJobOfferStatusDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateJobOfferDTO} createJobOfferDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createJobOffer(
      createJobOfferDTO: CreateJobOfferDTO,
      options?: any,
    ): AxiosPromise<JobOfferDTO> {
      return localVarFp
        .createJobOffer(createJobOfferDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateJobOfferDTO} createJobOfferDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createJobOffer1(
      createJobOfferDTO: CreateJobOfferDTO,
      options?: any,
    ): AxiosPromise<JobOfferDTO> {
      return localVarFp
        .createJobOffer1(createJobOfferDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteJobOffer(jobOfferId: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteJobOffer(jobOfferId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJobOfferById(
      jobOfferId: number,
      options?: any,
    ): AxiosPromise<JobOfferDTO> {
      return localVarFp
        .getJobOfferById(jobOfferId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJobOfferValue(jobOfferId: number, options?: any): AxiosPromise<number> {
      return localVarFp
        .getJobOfferValue(jobOfferId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {GetJobOffers} getJobOffers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJobOffers(
      getJobOffers: GetJobOffers,
      options?: any,
    ): AxiosPromise<PageJobOfferDTO> {
      return localVarFp
        .getJobOffers(getJobOffers, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {GetJobOffers} getJobOffers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJobOffers1(
      getJobOffers: GetJobOffers,
      options?: any,
    ): AxiosPromise<PageJobOfferDTO> {
      return localVarFp
        .getJobOffers1(getJobOffers, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {number} noteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNoteById(
      jobOfferId: number,
      noteId: number,
      options?: any,
    ): AxiosPromise<JobOfferHistoryDTO> {
      return localVarFp
        .getNoteById(jobOfferId, noteId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNotesByJobOfferId(
      jobOfferId: number,
      options?: any,
    ): AxiosPromise<Array<JobOfferHistoryDTO>> {
      return localVarFp
        .getNotesByJobOfferId(jobOfferId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} jobOfferId
     * @param {number} noteId
     * @param {CreateJobOfferHistoryNoteDTO} createJobOfferHistoryNoteDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNoteById(
      jobOfferId: number,
      noteId: number,
      createJobOfferHistoryNoteDTO: CreateJobOfferHistoryNoteDTO,
      options?: any,
    ): AxiosPromise<JobOfferHistoryDTO> {
      return localVarFp
        .updateNoteById(
          jobOfferId,
          noteId,
          createJobOfferHistoryNoteDTO,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * JobOfferControllerApi - object-oriented interface
 * @export
 * @class JobOfferControllerApi
 * @extends {BaseAPI}
 */
export class JobOfferControllerApi extends BaseAPI {
  /**
   *
   * @param {number} jobOfferId
   * @param {CreateJobOfferHistoryNoteDTO} createJobOfferHistoryNoteDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobOfferControllerApi
   */
  public addNoteByJobOfferId(
    jobOfferId: number,
    createJobOfferHistoryNoteDTO: CreateJobOfferHistoryNoteDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return JobOfferControllerApiFp(this.configuration)
      .addNoteByJobOfferId(jobOfferId, createJobOfferHistoryNoteDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} jobOfferId
   * @param {UpdateJobOfferDetailsDTO} updateJobOfferDetailsDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobOfferControllerApi
   */
  public changeJobOfferDetails(
    jobOfferId: number,
    updateJobOfferDetailsDTO: UpdateJobOfferDetailsDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return JobOfferControllerApiFp(this.configuration)
      .changeJobOfferDetails(jobOfferId, updateJobOfferDetailsDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} jobOfferId
   * @param {UpdateJobOfferStatusDTO} updateJobOfferStatusDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobOfferControllerApi
   */
  public changeJobOfferStatus(
    jobOfferId: number,
    updateJobOfferStatusDTO: UpdateJobOfferStatusDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return JobOfferControllerApiFp(this.configuration)
      .changeJobOfferStatus(jobOfferId, updateJobOfferStatusDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateJobOfferDTO} createJobOfferDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobOfferControllerApi
   */
  public createJobOffer(
    createJobOfferDTO: CreateJobOfferDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return JobOfferControllerApiFp(this.configuration)
      .createJobOffer(createJobOfferDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateJobOfferDTO} createJobOfferDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobOfferControllerApi
   */
  public createJobOffer1(
    createJobOfferDTO: CreateJobOfferDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return JobOfferControllerApiFp(this.configuration)
      .createJobOffer1(createJobOfferDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} jobOfferId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobOfferControllerApi
   */
  public deleteJobOffer(jobOfferId: number, options?: RawAxiosRequestConfig) {
    return JobOfferControllerApiFp(this.configuration)
      .deleteJobOffer(jobOfferId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} jobOfferId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobOfferControllerApi
   */
  public getJobOfferById(jobOfferId: number, options?: RawAxiosRequestConfig) {
    return JobOfferControllerApiFp(this.configuration)
      .getJobOfferById(jobOfferId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} jobOfferId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobOfferControllerApi
   */
  public getJobOfferValue(jobOfferId: number, options?: RawAxiosRequestConfig) {
    return JobOfferControllerApiFp(this.configuration)
      .getJobOfferValue(jobOfferId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {GetJobOffers} getJobOffers
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobOfferControllerApi
   */
  public getJobOffers(
    getJobOffers: GetJobOffers,
    options?: RawAxiosRequestConfig,
  ) {
    return JobOfferControllerApiFp(this.configuration)
      .getJobOffers(getJobOffers, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {GetJobOffers} getJobOffers
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobOfferControllerApi
   */
  public getJobOffers1(
    getJobOffers: GetJobOffers,
    options?: RawAxiosRequestConfig,
  ) {
    return JobOfferControllerApiFp(this.configuration)
      .getJobOffers1(getJobOffers, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} jobOfferId
   * @param {number} noteId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobOfferControllerApi
   */
  public getNoteById(
    jobOfferId: number,
    noteId: number,
    options?: RawAxiosRequestConfig,
  ) {
    return JobOfferControllerApiFp(this.configuration)
      .getNoteById(jobOfferId, noteId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} jobOfferId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobOfferControllerApi
   */
  public getNotesByJobOfferId(
    jobOfferId: number,
    options?: RawAxiosRequestConfig,
  ) {
    return JobOfferControllerApiFp(this.configuration)
      .getNotesByJobOfferId(jobOfferId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} jobOfferId
   * @param {number} noteId
   * @param {CreateJobOfferHistoryNoteDTO} createJobOfferHistoryNoteDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobOfferControllerApi
   */
  public updateNoteById(
    jobOfferId: number,
    noteId: number,
    createJobOfferHistoryNoteDTO: CreateJobOfferHistoryNoteDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return JobOfferControllerApiFp(this.configuration)
      .updateNoteById(jobOfferId, noteId, createJobOfferHistoryNoteDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MessageControllerApi - axios parameter creator
 * @export
 */
export const MessageControllerApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {number} messageId
     * @param {ChangeMessagePriorityDTO} changeMessagePriorityDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMessagePriority: async (
      messageId: number,
      changeMessagePriorityDTO: ChangeMessagePriorityDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("changeMessagePriority", "messageId", messageId);
      // verify required parameter 'changeMessagePriorityDTO' is not null or undefined
      assertParamExists(
        "changeMessagePriority",
        "changeMessagePriorityDTO",
        changeMessagePriorityDTO,
      );
      const localVarPath = `/API/messages/{messageId}/priority`.replace(
        `{${"messageId"}}`,
        encodeURIComponent(String(messageId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        changeMessagePriorityDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} messageId
     * @param {ChangeMessageStatusDTO} changeMessageStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMessageStatus: async (
      messageId: number,
      changeMessageStatusDTO: ChangeMessageStatusDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("changeMessageStatus", "messageId", messageId);
      // verify required parameter 'changeMessageStatusDTO' is not null or undefined
      assertParamExists(
        "changeMessageStatus",
        "changeMessageStatusDTO",
        changeMessageStatusDTO,
      );
      const localVarPath = `/API/messages/{messageId}`.replace(
        `{${"messageId"}}`,
        encodeURIComponent(String(messageId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        changeMessageStatusDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateMessageDTO} createMessageDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessage: async (
      createMessageDTO: CreateMessageDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createMessageDTO' is not null or undefined
      assertParamExists("createMessage", "createMessageDTO", createMessageDTO);
      const localVarPath = `/API/messages/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createMessageDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateMessageDTO} createMessageDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessage1: async (
      createMessageDTO: CreateMessageDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createMessageDTO' is not null or undefined
      assertParamExists("createMessage1", "createMessageDTO", createMessageDTO);
      const localVarPath = `/API/messages`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createMessageDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} messageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageById: async (
      messageId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("getMessageById", "messageId", messageId);
      const localVarPath = `/API/messages/{messageId}`.replace(
        `{${"messageId"}}`,
        encodeURIComponent(String(messageId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} mailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageByMailId: async (
      mailId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'mailId' is not null or undefined
      assertParamExists("getMessageByMailId", "mailId", mailId);
      const localVarPath = `/API/messages/mailId/{mailId}`.replace(
        `{${"mailId"}}`,
        encodeURIComponent(String(mailId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} messageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageHistory: async (
      messageId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageId' is not null or undefined
      assertParamExists("getMessageHistory", "messageId", messageId);
      const localVarPath = `/API/messages/{messageId}/history`.replace(
        `{${"messageId"}}`,
        encodeURIComponent(String(messageId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [limit]
     * @param {GetMessagesSortByEnum} [sortBy]
     * @param {GetMessagesFilterByStateEnum} [filterByState]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessages: async (
      page?: number,
      limit?: number,
      sortBy?: GetMessagesSortByEnum,
      filterByState?: GetMessagesFilterByStateEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/API/messages/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (sortBy !== undefined) {
        localVarQueryParameter["sortBy"] = sortBy;
      }

      if (filterByState !== undefined) {
        localVarQueryParameter["filterByState"] = filterByState;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [limit]
     * @param {GetMessages1SortByEnum} [sortBy]
     * @param {GetMessages1FilterByStateEnum} [filterByState]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessages1: async (
      page?: number,
      limit?: number,
      sortBy?: GetMessages1SortByEnum,
      filterByState?: GetMessages1FilterByStateEnum,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/API/messages`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (sortBy !== undefined) {
        localVarQueryParameter["sortBy"] = sortBy;
      }

      if (filterByState !== undefined) {
        localVarQueryParameter["filterByState"] = filterByState;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MessageControllerApi - functional programming interface
 * @export
 */
export const MessageControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    MessageControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} messageId
     * @param {ChangeMessagePriorityDTO} changeMessagePriorityDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changeMessagePriority(
      messageId: number,
      changeMessagePriorityDTO: ChangeMessagePriorityDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.changeMessagePriority(
          messageId,
          changeMessagePriorityDTO,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageControllerApi.changeMessagePriority"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} messageId
     * @param {ChangeMessageStatusDTO} changeMessageStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changeMessageStatus(
      messageId: number,
      changeMessageStatusDTO: ChangeMessageStatusDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.changeMessageStatus(
          messageId,
          changeMessageStatusDTO,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageControllerApi.changeMessageStatus"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateMessageDTO} createMessageDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createMessage(
      createMessageDTO: CreateMessageDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createMessage(
        createMessageDTO,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageControllerApi.createMessage"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateMessageDTO} createMessageDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createMessage1(
      createMessageDTO: CreateMessageDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createMessage1(
        createMessageDTO,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageControllerApi.createMessage1"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} messageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMessageById(
      messageId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageById(
        messageId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageControllerApi.getMessageById"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} mailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMessageByMailId(
      mailId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMessageByMailId(mailId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageControllerApi.getMessageByMailId"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} messageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMessageHistory(
      messageId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<MessageActionsHistoryDTO>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMessageHistory(messageId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageControllerApi.getMessageHistory"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [limit]
     * @param {GetMessagesSortByEnum} [sortBy]
     * @param {GetMessagesFilterByStateEnum} [filterByState]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMessages(
      page?: number,
      limit?: number,
      sortBy?: GetMessagesSortByEnum,
      filterByState?: GetMessagesFilterByStateEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageMessageDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMessages(
        page,
        limit,
        sortBy,
        filterByState,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageControllerApi.getMessages"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [limit]
     * @param {GetMessages1SortByEnum} [sortBy]
     * @param {GetMessages1FilterByStateEnum} [filterByState]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMessages1(
      page?: number,
      limit?: number,
      sortBy?: GetMessages1SortByEnum,
      filterByState?: GetMessages1FilterByStateEnum,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageMessageDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMessages1(
        page,
        limit,
        sortBy,
        filterByState,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["MessageControllerApi.getMessages1"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * MessageControllerApi - factory interface
 * @export
 */
export const MessageControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = MessageControllerApiFp(configuration);
  return {
    /**
     *
     * @param {number} messageId
     * @param {ChangeMessagePriorityDTO} changeMessagePriorityDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMessagePriority(
      messageId: number,
      changeMessagePriorityDTO: ChangeMessagePriorityDTO,
      options?: any,
    ): AxiosPromise<MessageDTO> {
      return localVarFp
        .changeMessagePriority(messageId, changeMessagePriorityDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} messageId
     * @param {ChangeMessageStatusDTO} changeMessageStatusDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMessageStatus(
      messageId: number,
      changeMessageStatusDTO: ChangeMessageStatusDTO,
      options?: any,
    ): AxiosPromise<MessageDTO> {
      return localVarFp
        .changeMessageStatus(messageId, changeMessageStatusDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateMessageDTO} createMessageDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessage(
      createMessageDTO: CreateMessageDTO,
      options?: any,
    ): AxiosPromise<MessageDTO> {
      return localVarFp
        .createMessage(createMessageDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateMessageDTO} createMessageDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessage1(
      createMessageDTO: CreateMessageDTO,
      options?: any,
    ): AxiosPromise<MessageDTO> {
      return localVarFp
        .createMessage1(createMessageDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} messageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageById(messageId: number, options?: any): AxiosPromise<MessageDTO> {
      return localVarFp
        .getMessageById(messageId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} mailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageByMailId(
      mailId: string,
      options?: any,
    ): AxiosPromise<MessageDTO> {
      return localVarFp
        .getMessageByMailId(mailId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} messageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageHistory(
      messageId: number,
      options?: any,
    ): AxiosPromise<Array<MessageActionsHistoryDTO>> {
      return localVarFp
        .getMessageHistory(messageId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [limit]
     * @param {GetMessagesSortByEnum} [sortBy]
     * @param {GetMessagesFilterByStateEnum} [filterByState]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessages(
      page?: number,
      limit?: number,
      sortBy?: GetMessagesSortByEnum,
      filterByState?: GetMessagesFilterByStateEnum,
      options?: any,
    ): AxiosPromise<PageMessageDTO> {
      return localVarFp
        .getMessages(page, limit, sortBy, filterByState, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [limit]
     * @param {GetMessages1SortByEnum} [sortBy]
     * @param {GetMessages1FilterByStateEnum} [filterByState]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessages1(
      page?: number,
      limit?: number,
      sortBy?: GetMessages1SortByEnum,
      filterByState?: GetMessages1FilterByStateEnum,
      options?: any,
    ): AxiosPromise<PageMessageDTO> {
      return localVarFp
        .getMessages1(page, limit, sortBy, filterByState, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * MessageControllerApi - object-oriented interface
 * @export
 * @class MessageControllerApi
 * @extends {BaseAPI}
 */
export class MessageControllerApi extends BaseAPI {
  /**
   *
   * @param {number} messageId
   * @param {ChangeMessagePriorityDTO} changeMessagePriorityDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageControllerApi
   */
  public changeMessagePriority(
    messageId: number,
    changeMessagePriorityDTO: ChangeMessagePriorityDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return MessageControllerApiFp(this.configuration)
      .changeMessagePriority(messageId, changeMessagePriorityDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} messageId
   * @param {ChangeMessageStatusDTO} changeMessageStatusDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageControllerApi
   */
  public changeMessageStatus(
    messageId: number,
    changeMessageStatusDTO: ChangeMessageStatusDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return MessageControllerApiFp(this.configuration)
      .changeMessageStatus(messageId, changeMessageStatusDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateMessageDTO} createMessageDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageControllerApi
   */
  public createMessage(
    createMessageDTO: CreateMessageDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return MessageControllerApiFp(this.configuration)
      .createMessage(createMessageDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateMessageDTO} createMessageDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageControllerApi
   */
  public createMessage1(
    createMessageDTO: CreateMessageDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return MessageControllerApiFp(this.configuration)
      .createMessage1(createMessageDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} messageId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageControllerApi
   */
  public getMessageById(messageId: number, options?: RawAxiosRequestConfig) {
    return MessageControllerApiFp(this.configuration)
      .getMessageById(messageId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} mailId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageControllerApi
   */
  public getMessageByMailId(mailId: string, options?: RawAxiosRequestConfig) {
    return MessageControllerApiFp(this.configuration)
      .getMessageByMailId(mailId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} messageId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageControllerApi
   */
  public getMessageHistory(messageId: number, options?: RawAxiosRequestConfig) {
    return MessageControllerApiFp(this.configuration)
      .getMessageHistory(messageId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [page]
   * @param {number} [limit]
   * @param {GetMessagesSortByEnum} [sortBy]
   * @param {GetMessagesFilterByStateEnum} [filterByState]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageControllerApi
   */
  public getMessages(
    page?: number,
    limit?: number,
    sortBy?: GetMessagesSortByEnum,
    filterByState?: GetMessagesFilterByStateEnum,
    options?: RawAxiosRequestConfig,
  ) {
    return MessageControllerApiFp(this.configuration)
      .getMessages(page, limit, sortBy, filterByState, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [page]
   * @param {number} [limit]
   * @param {GetMessages1SortByEnum} [sortBy]
   * @param {GetMessages1FilterByStateEnum} [filterByState]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageControllerApi
   */
  public getMessages1(
    page?: number,
    limit?: number,
    sortBy?: GetMessages1SortByEnum,
    filterByState?: GetMessages1FilterByStateEnum,
    options?: RawAxiosRequestConfig,
  ) {
    return MessageControllerApiFp(this.configuration)
      .getMessages1(page, limit, sortBy, filterByState, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const GetMessagesSortByEnum = {
  PriorityAsc: "PriorityAsc",
  PriorityDesc: "PriorityDesc",
  StatusAsc: "StatusAsc",
  StatusDesc: "StatusDesc",
  DateAsc: "DateAsc",
  DateDesc: "DateDesc",
} as const;
export type GetMessagesSortByEnum =
  (typeof GetMessagesSortByEnum)[keyof typeof GetMessagesSortByEnum];
/**
 * @export
 */
export const GetMessagesFilterByStateEnum = {
  Received: "Received",
  Read: "Read",
  Discarded: "Discarded",
  Processing: "Processing",
  Done: "Done",
  Failed: "Failed",
} as const;
export type GetMessagesFilterByStateEnum =
  (typeof GetMessagesFilterByStateEnum)[keyof typeof GetMessagesFilterByStateEnum];
/**
 * @export
 */
export const GetMessages1SortByEnum = {
  PriorityAsc: "PriorityAsc",
  PriorityDesc: "PriorityDesc",
  StatusAsc: "StatusAsc",
  StatusDesc: "StatusDesc",
  DateAsc: "DateAsc",
  DateDesc: "DateDesc",
} as const;
export type GetMessages1SortByEnum =
  (typeof GetMessages1SortByEnum)[keyof typeof GetMessages1SortByEnum];
/**
 * @export
 */
export const GetMessages1FilterByStateEnum = {
  Received: "Received",
  Read: "Read",
  Discarded: "Discarded",
  Processing: "Processing",
  Done: "Done",
  Failed: "Failed",
} as const;
export type GetMessages1FilterByStateEnum =
  (typeof GetMessages1FilterByStateEnum)[keyof typeof GetMessages1FilterByStateEnum];

/**
 * ProfessionalControllerApi - axios parameter creator
 * @export
 */
export const ProfessionalControllerApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {CreateProfessionalDTO} createProfessionalDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProfessional: async (
      createProfessionalDTO: CreateProfessionalDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createProfessionalDTO' is not null or undefined
      assertParamExists(
        "createProfessional",
        "createProfessionalDTO",
        createProfessionalDTO,
      );
      const localVarPath = `/API/professionals`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createProfessionalDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProfessional: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteProfessional", "id", id);
      const localVarPath = `/API/professionals/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfessional: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getProfessional", "id", id);
      const localVarPath = `/API/professionals/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} page
     * @param {number} limit
     * @param {ProfessionalFilters} professionalFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfessionals: async (
      page: number,
      limit: number,
      professionalFilters: ProfessionalFilters,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getProfessionals", "page", page);
      // verify required parameter 'limit' is not null or undefined
      assertParamExists("getProfessionals", "limit", limit);
      // verify required parameter 'professionalFilters' is not null or undefined
      assertParamExists(
        "getProfessionals",
        "professionalFilters",
        professionalFilters,
      );
      const localVarPath = `/API/professionals`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (professionalFilters !== undefined) {
        for (const [key, value] of Object.entries(professionalFilters)) {
          localVarQueryParameter[key] = value;
        }
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {CreateProfessionalDTO} createProfessionalDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfessional: async (
      id: number,
      createProfessionalDTO: CreateProfessionalDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateProfessional", "id", id);
      // verify required parameter 'createProfessionalDTO' is not null or undefined
      assertParamExists(
        "updateProfessional",
        "createProfessionalDTO",
        createProfessionalDTO,
      );
      const localVarPath = `/API/professionals/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createProfessionalDTO,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {number} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfessionalContact: async (
      id: number,
      body: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateProfessionalContact", "id", id);
      // verify required parameter 'body' is not null or undefined
      assertParamExists("updateProfessionalContact", "body", body);
      const localVarPath = `/API/professionals/{id}/contact`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {number} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfessionalDailyRate: async (
      id: number,
      body: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateProfessionalDailyRate", "id", id);
      // verify required parameter 'body' is not null or undefined
      assertParamExists("updateProfessionalDailyRate", "body", body);
      const localVarPath = `/API/professionals/{id}/dailyRate`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfessionalEmploymentState: async (
      id: number,
      body: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateProfessionalEmploymentState", "id", id);
      // verify required parameter 'body' is not null or undefined
      assertParamExists("updateProfessionalEmploymentState", "body", body);
      const localVarPath = `/API/professionals/{id}/employmentState`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfessionalNotes: async (
      id: number,
      body: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateProfessionalNotes", "id", id);
      // verify required parameter 'body' is not null or undefined
      assertParamExists("updateProfessionalNotes", "body", body);
      const localVarPath = `/API/professionals/{id}/notes`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {Set<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfessionalSkills: async (
      id: number,
      requestBody: Set<string>,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateProfessionalSkills", "id", id);
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists("updateProfessionalSkills", "requestBody", requestBody);
      const localVarPath = `/API/professionals/{id}/skills`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProfessionalControllerApi - functional programming interface
 * @export
 */
export const ProfessionalControllerApiFp = function (
  configuration?: Configuration,
) {
  const localVarAxiosParamCreator =
    ProfessionalControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateProfessionalDTO} createProfessionalDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createProfessional(
      createProfessionalDTO: CreateProfessionalDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ProfessionalDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createProfessional(
          createProfessionalDTO,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProfessionalControllerApi.createProfessional"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteProfessional(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteProfessional(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProfessionalControllerApi.deleteProfessional"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProfessional(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ProfessionalDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProfessional(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProfessionalControllerApi.getProfessional"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} page
     * @param {number} limit
     * @param {ProfessionalFilters} professionalFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProfessionals(
      page: number,
      limit: number,
      professionalFilters: ProfessionalFilters,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PageProfessionalDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getProfessionals(
          page,
          limit,
          professionalFilters,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProfessionalControllerApi.getProfessionals"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {CreateProfessionalDTO} createProfessionalDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateProfessional(
      id: number,
      createProfessionalDTO: CreateProfessionalDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ProfessionalDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateProfessional(
          id,
          createProfessionalDTO,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProfessionalControllerApi.updateProfessional"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {number} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateProfessionalContact(
      id: number,
      body: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateProfessionalContact(
          id,
          body,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "ProfessionalControllerApi.updateProfessionalContact"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {number} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateProfessionalDailyRate(
      id: number,
      body: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateProfessionalDailyRate(
          id,
          body,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "ProfessionalControllerApi.updateProfessionalDailyRate"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateProfessionalEmploymentState(
      id: number,
      body: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateProfessionalEmploymentState(
          id,
          body,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "ProfessionalControllerApi.updateProfessionalEmploymentState"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateProfessionalNotes(
      id: number,
      body: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateProfessionalNotes(
          id,
          body,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "ProfessionalControllerApi.updateProfessionalNotes"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {Set<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateProfessionalSkills(
      id: number,
      requestBody: Set<string>,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateProfessionalSkills(
          id,
          requestBody,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          "ProfessionalControllerApi.updateProfessionalSkills"
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ProfessionalControllerApi - factory interface
 * @export
 */
export const ProfessionalControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ProfessionalControllerApiFp(configuration);
  return {
    /**
     *
     * @param {CreateProfessionalDTO} createProfessionalDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProfessional(
      createProfessionalDTO: CreateProfessionalDTO,
      options?: any,
    ): AxiosPromise<ProfessionalDTO> {
      return localVarFp
        .createProfessional(createProfessionalDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProfessional(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteProfessional(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfessional(id: number, options?: any): AxiosPromise<ProfessionalDTO> {
      return localVarFp
        .getProfessional(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} page
     * @param {number} limit
     * @param {ProfessionalFilters} professionalFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfessionals(
      page: number,
      limit: number,
      professionalFilters: ProfessionalFilters,
      options?: any,
    ): AxiosPromise<PageProfessionalDTO> {
      return localVarFp
        .getProfessionals(page, limit, professionalFilters, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {CreateProfessionalDTO} createProfessionalDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfessional(
      id: number,
      createProfessionalDTO: CreateProfessionalDTO,
      options?: any,
    ): AxiosPromise<ProfessionalDTO> {
      return localVarFp
        .updateProfessional(id, createProfessionalDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {number} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfessionalContact(
      id: number,
      body: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updateProfessionalContact(id, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {number} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfessionalDailyRate(
      id: number,
      body: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updateProfessionalDailyRate(id, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfessionalEmploymentState(
      id: number,
      body: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updateProfessionalEmploymentState(id, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfessionalNotes(
      id: number,
      body: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updateProfessionalNotes(id, body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {Set<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfessionalSkills(
      id: number,
      requestBody: Set<string>,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updateProfessionalSkills(id, requestBody, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ProfessionalControllerApi - object-oriented interface
 * @export
 * @class ProfessionalControllerApi
 * @extends {BaseAPI}
 */
export class ProfessionalControllerApi extends BaseAPI {
  /**
   *
   * @param {CreateProfessionalDTO} createProfessionalDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfessionalControllerApi
   */
  public createProfessional(
    createProfessionalDTO: CreateProfessionalDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return ProfessionalControllerApiFp(this.configuration)
      .createProfessional(createProfessionalDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfessionalControllerApi
   */
  public deleteProfessional(id: number, options?: RawAxiosRequestConfig) {
    return ProfessionalControllerApiFp(this.configuration)
      .deleteProfessional(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfessionalControllerApi
   */
  public getProfessional(id: number, options?: RawAxiosRequestConfig) {
    return ProfessionalControllerApiFp(this.configuration)
      .getProfessional(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} page
   * @param {number} limit
   * @param {ProfessionalFilters} professionalFilters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfessionalControllerApi
   */
  public getProfessionals(
    page: number,
    limit: number,
    professionalFilters: ProfessionalFilters,
    options?: RawAxiosRequestConfig,
  ) {
    return ProfessionalControllerApiFp(this.configuration)
      .getProfessionals(page, limit, professionalFilters, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {CreateProfessionalDTO} createProfessionalDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfessionalControllerApi
   */
  public updateProfessional(
    id: number,
    createProfessionalDTO: CreateProfessionalDTO,
    options?: RawAxiosRequestConfig,
  ) {
    return ProfessionalControllerApiFp(this.configuration)
      .updateProfessional(id, createProfessionalDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {number} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfessionalControllerApi
   */
  public updateProfessionalContact(
    id: number,
    body: number,
    options?: RawAxiosRequestConfig,
  ) {
    return ProfessionalControllerApiFp(this.configuration)
      .updateProfessionalContact(id, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {number} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfessionalControllerApi
   */
  public updateProfessionalDailyRate(
    id: number,
    body: number,
    options?: RawAxiosRequestConfig,
  ) {
    return ProfessionalControllerApiFp(this.configuration)
      .updateProfessionalDailyRate(id, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {string} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfessionalControllerApi
   */
  public updateProfessionalEmploymentState(
    id: number,
    body: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ProfessionalControllerApiFp(this.configuration)
      .updateProfessionalEmploymentState(id, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {string} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfessionalControllerApi
   */
  public updateProfessionalNotes(
    id: number,
    body: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ProfessionalControllerApiFp(this.configuration)
      .updateProfessionalNotes(id, body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {Set<string>} requestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfessionalControllerApi
   */
  public updateProfessionalSkills(
    id: number,
    requestBody: Set<string>,
    options?: RawAxiosRequestConfig,
  ) {
    return ProfessionalControllerApiFp(this.configuration)
      .updateProfessionalSkills(id, requestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TeaPotApi - axios parameter creator
 * @export
 */
export const TeaPotApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCoffee: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/coffee`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TeaPotApi - functional programming interface
 * @export
 */
export const TeaPotApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TeaPotApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCoffee(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCoffee(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeaPotApi.getCoffee"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * TeaPotApi - factory interface
 * @export
 */
export const TeaPotApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TeaPotApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCoffee(options?: any): AxiosPromise<void> {
      return localVarFp
        .getCoffee(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TeaPotApi - object-oriented interface
 * @export
 * @class TeaPotApi
 * @extends {BaseAPI}
 */
export class TeaPotApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeaPotApi
   */
  public getCoffee(options?: RawAxiosRequestConfig) {
    return TeaPotApiFp(this.configuration)
      .getCoffee(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
